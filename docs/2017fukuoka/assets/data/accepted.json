{"version":"1.0","encoding":"UTF-8","feed":{"xmlns":"http://www.w3.org/2005/Atom","xmlns$openSearch":"http://a9.com/-/spec/opensearchrss/1.0/","xmlns$gsx":"http://schemas.google.com/spreadsheets/2006/extended","id":{"$t":"https://spreadsheets.google.com/feeds/list/1iKaHh6Jpg0DTNeoE9NhwNf46GR130YLlB3V6oHdoTmU/o6gxhse/public/values"},"updated":{"$t":"2017-06-16T02:11:40.941Z"},"category":[{"scheme":"http://schemas.google.com/spreadsheets/2006","term":"http://schemas.google.com/spreadsheets/2006#list"}],"title":{"type":"text","$t":"accepted"},"link":[{"rel":"alternate","type":"application/atom+xml","href":"https://docs.google.com/spreadsheets/d/1iKaHh6Jpg0DTNeoE9NhwNf46GR130YLlB3V6oHdoTmU/pubhtml"},{"rel":"http://schemas.google.com/g/2005#feed","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1iKaHh6Jpg0DTNeoE9NhwNf46GR130YLlB3V6oHdoTmU/o6gxhse/public/values"},{"rel":"http://schemas.google.com/g/2005#post","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1iKaHh6Jpg0DTNeoE9NhwNf46GR130YLlB3V6oHdoTmU/o6gxhse/public/values"},{"rel":"self","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1iKaHh6Jpg0DTNeoE9NhwNf46GR130YLlB3V6oHdoTmU/o6gxhse/public/values?alt\u003djson"}],"author":[{"name":{"$t":"h.satoshi"},"email":{"$t":"h.satoshi@gmail.com"}}],"openSearch$totalResults":{"$t":"21"},"openSearch$startIndex":{"$t":"1"},"entry":[{"id":{"$t":"https://spreadsheets.google.com/feeds/list/1iKaHh6Jpg0DTNeoE9NhwNf46GR130YLlB3V6oHdoTmU/o6gxhse/public/values/cokwr"},"updated":{"$t":"2017-06-16T02:11:40.941Z"},"category":[{"scheme":"http://schemas.google.com/spreadsheets/2006","term":"http://schemas.google.com/spreadsheets/2006#list"}],"title":{"type":"text","$t":"1"},"content":{"type":"text","$t":"title: 2017年夏のPerl, description: YAPC::Hokkaido、YAPC::Kansaiと、これまでも2016年から2017年のPerlについて説明してきましたが、この頃にはPerl 5.26もリリースされているはずですから、5月に開催されるPerl Toolchain Summitのネタをはじめとして、また何か新しい動きも見られることでしょう。このトークでは、そのような最新情報や、YAPC::Kansaiでもまた話しそびれてしまった内容などを交えつつ、現在のPerl 5/6の状況を簡単にまとめていきます。, talktime: 40min, author: charsbar, githubid: charsbar, twitterid: charsbar, timestamp: 2017/03/05, trackid: track-a, startat: 10:00"},"link":[{"rel":"self","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1iKaHh6Jpg0DTNeoE9NhwNf46GR130YLlB3V6oHdoTmU/o6gxhse/public/values/cokwr"}],"gsx$id":{"$t":"1"},"gsx$title":{"$t":"2017年夏のPerl"},"gsx$description":{"$t":"YAPC::Hokkaido、YAPC::Kansaiと、これまでも2016年から2017年のPerlについて説明してきましたが、この頃にはPerl 5.26もリリースされているはずですから、5月に開催されるPerl Toolchain Summitのネタをはじめとして、また何か新しい動きも見られることでしょう。このトークでは、そのような最新情報や、YAPC::Kansaiでもまた話しそびれてしまった内容などを交えつつ、現在のPerl 5/6の状況を簡単にまとめていきます。"},"gsx$talktime":{"$t":"40min"},"gsx$author":{"$t":"charsbar"},"gsx$githubid":{"$t":"charsbar"},"gsx$twitterid":{"$t":"charsbar"},"gsx$blogurl":{"$t":""},"gsx$timestamp":{"$t":"2017/03/05"},"gsx$trackid":{"$t":"track-a"},"gsx$startat":{"$t":"10:00"}},{"id":{"$t":"https://spreadsheets.google.com/feeds/list/1iKaHh6Jpg0DTNeoE9NhwNf46GR130YLlB3V6oHdoTmU/o6gxhse/public/values/cpzh4"},"updated":{"$t":"2017-06-16T02:11:40.941Z"},"category":[{"scheme":"http://schemas.google.com/spreadsheets/2006","term":"http://schemas.google.com/spreadsheets/2006#list"}],"title":{"type":"text","$t":"30"},"content":{"type":"text","$t":"title: レガシーPerlと「今」を組み合わせ、開発を継続し続ける方法, description: 話し手の所属するGMOペパボではロリポップという17年超の老舗巨大ホスティングサービスのコアAPIにPerlを採用し、今日に至っています。しかし、昨今のPerlの書き手の減少や、バージョンアップに追従できず、すっかりレガシーシステム化してしまったAPIを再開発可能にしながら、リニューアルを並行して進めています。\n\n古いバージョンのPerlをいかにして再開発していくか、またどう置き換えていくか？ということ、どういった理由で技術的決断を行ったのかについて具体的な事例を含めながら紹介します。本セッションの技術トピックは下記のとおりです。\n\n1. Perl5.8\n2. Docker\n3. Drone.io\n4. Echo(Golang), talktime: 20min, author: 山下 和彦, githubid: pyama86, twitterid: pyama86, blogurl: https://ten-snapon.com, timestamp: 2017/05/27, trackid: track-b, startat: 10:00"},"link":[{"rel":"self","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1iKaHh6Jpg0DTNeoE9NhwNf46GR130YLlB3V6oHdoTmU/o6gxhse/public/values/cpzh4"}],"gsx$id":{"$t":"30"},"gsx$title":{"$t":"レガシーPerlと「今」を組み合わせ、開発を継続し続ける方法"},"gsx$description":{"$t":"話し手の所属するGMOペパボではロリポップという17年超の老舗巨大ホスティングサービスのコアAPIにPerlを採用し、今日に至っています。しかし、昨今のPerlの書き手の減少や、バージョンアップに追従できず、すっかりレガシーシステム化してしまったAPIを再開発可能にしながら、リニューアルを並行して進めています。\n\n古いバージョンのPerlをいかにして再開発していくか、またどう置き換えていくか？ということ、どういった理由で技術的決断を行ったのかについて具体的な事例を含めながら紹介します。本セッションの技術トピックは下記のとおりです。\n\n1. Perl5.8\n2. Docker\n3. Drone.io\n4. Echo(Golang)"},"gsx$talktime":{"$t":"20min"},"gsx$author":{"$t":"山下 和彦"},"gsx$githubid":{"$t":"pyama86"},"gsx$twitterid":{"$t":"pyama86"},"gsx$blogurl":{"$t":"https://ten-snapon.com"},"gsx$timestamp":{"$t":"2017/05/27"},"gsx$trackid":{"$t":"track-b"},"gsx$startat":{"$t":"10:00"}},{"id":{"$t":"https://spreadsheets.google.com/feeds/list/1iKaHh6Jpg0DTNeoE9NhwNf46GR130YLlB3V6oHdoTmU/o6gxhse/public/values/cre1l"},"updated":{"$t":"2017-06-16T02:11:40.941Z"},"category":[{"scheme":"http://schemas.google.com/spreadsheets/2006","term":"http://schemas.google.com/spreadsheets/2006#list"}],"title":{"type":"text","$t":"42"},"content":{"type":"text","$t":"title: 稼働中の Web サービスの Perl 処理系バージョンアップをしていく話, description: はてなの実験的サービス「はてラボ」の一貫として2015年3月にリリースした \"みんなでつくるアンテナサービス\" 大チェッカー のサーバーサイドは Perl 5 で作られています。\nリリースからこれまでの間に大チェッカーの Perl の処理系を2回バージョンアップ(5.20.1 \u003d\u003e 5.24.0 \u003d\u003e 5.26.0)してきた体験談と、その裏の心意気についてお話ししようと思います。\nまた、大チェッカー自体は小さな Web サービスですが、そのアップデート知見を元に社内の他のサービスで処理系のバージョンアップをする話についてもお話しできればよいなと思っています。\n\n## する話\n\n- 人はなぜ処理系のバージョンを上げるのか またはなぜ上げないのか\n- 現代的な Web アプリケーション (Plack + carton Perl 5.2x くらい) における処理系バージョンアップ\n- 検証コストを下げるためのテクニック\n  - 開発環境・検証環境のための部分的な Docker の導入\n  - ブランチ間で共有する/しない空間\n- 無停止でバージョンアップするために\n  - クラウドでブルーグリーンデプロイの夢を見る\n- 継続的にバージョンを上げていける環境を作るために\n\n## しない話\n\n- 太古の処理系 (ex. Perl 5.8.8……) からのビッグバンバージョンアップ\n- Web アプリケーションの実行アーキテクチャ自体の変更 (ex. mod_perl2 \u003d\u003e plack), talktime: 20min, author: astj, githubid: astj, twitterid: ast_j, blogurl: astj.hatenablog.com, timestamp: 2017/06/02, trackid: track-b, startat: 10:20"},"link":[{"rel":"self","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1iKaHh6Jpg0DTNeoE9NhwNf46GR130YLlB3V6oHdoTmU/o6gxhse/public/values/cre1l"}],"gsx$id":{"$t":"42"},"gsx$title":{"$t":"稼働中の Web サービスの Perl 処理系バージョンアップをしていく話"},"gsx$description":{"$t":"はてなの実験的サービス「はてラボ」の一貫として2015年3月にリリースした \"みんなでつくるアンテナサービス\" 大チェッカー のサーバーサイドは Perl 5 で作られています。\nリリースからこれまでの間に大チェッカーの Perl の処理系を2回バージョンアップ(5.20.1 \u003d\u003e 5.24.0 \u003d\u003e 5.26.0)してきた体験談と、その裏の心意気についてお話ししようと思います。\nまた、大チェッカー自体は小さな Web サービスですが、そのアップデート知見を元に社内の他のサービスで処理系のバージョンアップをする話についてもお話しできればよいなと思っています。\n\n## する話\n\n- 人はなぜ処理系のバージョンを上げるのか またはなぜ上げないのか\n- 現代的な Web アプリケーション (Plack + carton Perl 5.2x くらい) における処理系バージョンアップ\n- 検証コストを下げるためのテクニック\n  - 開発環境・検証環境のための部分的な Docker の導入\n  - ブランチ間で共有する/しない空間\n- 無停止でバージョンアップするために\n  - クラウドでブルーグリーンデプロイの夢を見る\n- 継続的にバージョンを上げていける環境を作るために\n\n## しない話\n\n- 太古の処理系 (ex. Perl 5.8.8……) からのビッグバンバージョンアップ\n- Web アプリケーションの実行アーキテクチャ自体の変更 (ex. mod_perl2 \u003d\u003e plack)"},"gsx$talktime":{"$t":"20min"},"gsx$author":{"$t":"astj"},"gsx$githubid":{"$t":"astj"},"gsx$twitterid":{"$t":"ast_j"},"gsx$blogurl":{"$t":"astj.hatenablog.com"},"gsx$timestamp":{"$t":"2017/06/02"},"gsx$trackid":{"$t":"track-b"},"gsx$startat":{"$t":"10:20"}},{"id":{"$t":"https://spreadsheets.google.com/feeds/list/1iKaHh6Jpg0DTNeoE9NhwNf46GR130YLlB3V6oHdoTmU/o6gxhse/public/values/chk2m"},"updated":{"$t":"2017-06-16T02:11:40.941Z"},"category":[{"scheme":"http://schemas.google.com/spreadsheets/2006","term":"http://schemas.google.com/spreadsheets/2006#list"}],"title":{"type":"text","$t":"33"},"content":{"type":"text","$t":"title: Be PaaS Monger - クラウドエンジニアの三大美徳、またはIaaSを使わない3つの理由, description: このセッションではPaaSを使ってシステムを設計・開発する上で重要となるマインドセットを、「Perlの父」Larry Wall氏が定義したプログラマの三大美徳に倣って解説していきます。\n具体的なテクノロジーの話は控えめですが、PaaSという物を無駄なく使い尽くすための考え方を、AzureとPerlなどの言語による実例を交えて説明します。\n\n## 怠惰であれ\n* 余分な管理をしたくない\n* 勝手にスケールしてほしい\n* etc...\n\n## 短気であれ\n* すぐに使える環境がほしい\n* 吊るしの環境で最高のパフォーマンスを出したい\n* etc... \n\n## 傲慢であれ\n* 開発を簡略化したい\n* 壊れた時に手っ取り早く直したい\n* etc...\n\n## Perl MongerならPaaS Mongerにもなれる\n* そう、Azure Functionsならね！\n* Azure Web Apps for Linuxでも簡単！\n\n## 実例\n* 顔画像を認識して人物特定・メタデータ追加\n* 何日で作ったか\n\n## まとめ\n* IaaSからPaaSへのマインドセット転換\n, talktime: 40min, author: わいとん, githubid: ytnobody, twitterid: ytnobody, blogurl: ytnobody.net, timestamp: 2017/05/30, trackid: track-b, startat: 10:40"},"link":[{"rel":"self","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1iKaHh6Jpg0DTNeoE9NhwNf46GR130YLlB3V6oHdoTmU/o6gxhse/public/values/chk2m"}],"gsx$id":{"$t":"33"},"gsx$title":{"$t":"Be PaaS Monger - クラウドエンジニアの三大美徳、またはIaaSを使わない3つの理由"},"gsx$description":{"$t":"このセッションではPaaSを使ってシステムを設計・開発する上で重要となるマインドセットを、「Perlの父」Larry Wall氏が定義したプログラマの三大美徳に倣って解説していきます。\n具体的なテクノロジーの話は控えめですが、PaaSという物を無駄なく使い尽くすための考え方を、AzureとPerlなどの言語による実例を交えて説明します。\n\n## 怠惰であれ\n* 余分な管理をしたくない\n* 勝手にスケールしてほしい\n* etc...\n\n## 短気であれ\n* すぐに使える環境がほしい\n* 吊るしの環境で最高のパフォーマンスを出したい\n* etc... \n\n## 傲慢であれ\n* 開発を簡略化したい\n* 壊れた時に手っ取り早く直したい\n* etc...\n\n## Perl MongerならPaaS Mongerにもなれる\n* そう、Azure Functionsならね！\n* Azure Web Apps for Linuxでも簡単！\n\n## 実例\n* 顔画像を認識して人物特定・メタデータ追加\n* 何日で作ったか\n\n## まとめ\n* IaaSからPaaSへのマインドセット転換\n"},"gsx$talktime":{"$t":"40min"},"gsx$author":{"$t":"わいとん"},"gsx$githubid":{"$t":"ytnobody"},"gsx$twitterid":{"$t":"ytnobody"},"gsx$blogurl":{"$t":"ytnobody.net"},"gsx$timestamp":{"$t":"2017/05/30"},"gsx$trackid":{"$t":"track-b"},"gsx$startat":{"$t":"10:40"}},{"id":{"$t":"https://spreadsheets.google.com/feeds/list/1iKaHh6Jpg0DTNeoE9NhwNf46GR130YLlB3V6oHdoTmU/o6gxhse/public/values/ciyn3"},"updated":{"$t":"2017-06-16T02:11:40.941Z"},"category":[{"scheme":"http://schemas.google.com/spreadsheets/2006","term":"http://schemas.google.com/spreadsheets/2006#list"}],"title":{"type":"text","$t":"13"},"content":{"type":"text","$t":"title: 分散ユニークID採番機katsubushiとWebアプリケーションへの応用例, description: 面白法人カヤックでは、自社で開発したOSSの分散ユニークID採番機 [katsubushi](https://github.com/kayac/go-katsubushi) をWebアプリケーションの様々な場面で利用しています。\n\n本トークでは、katsubushi の機能、利用方法、Perl / Go で記述されたWebアプリケーションへの応用、コンテナ環境での運用方法などについて紹介します。\n\n## トーク詳細\n\nkatsubushi は、Twitter社 の Snowflake と同様のアルゴリズムにもとづいて、分散環境で重複のない 64bit 整数の ID を発行するためのソフトウェアです。Goで記述された daemon で、Memcached プロトコルでアクセスできます。\n\nもとは [Lobi](https://lobi.co) というサービス (大部分がPerlで記述されています) で、データベースをシャーディングする必要に迫られた際に、複数DB間で重複のないIDを発行するために開発されたものですが、その特性から、以下のような様々な用途にも利用されています。\n\n- リクエストIDとして\n  - nginxがリクエストを受け付けた時点で katsubushi ID を発行し、その後の全ての処理に引き渡すことで、各種処理の追跡を容易にします\n  - Plack::Middleware::SetLocalEnv を利用して、Plack 上で実行されている Web アプリケーション内の任意の箇所からリクエストIDを読み取れます\n  - Gearmand を経由した非同期処理のジョブや、MySQL へ発行するクエリにコメントでリクエストIDを埋め込むことで、問題のある処理の発見を容易にします\n\n- 日時でパーティショニングを行うテーブルのプライマリキーとして\n  - IDから発行日時を逆算できるため、MySQL のパーティショニングにおいてIDと日時の複合プライマリキーを設定することなく、ID のみでプライマリキー兼パーティションキーとして利用できます\n  - IDのみで検索クエリを実行した場合に、自動的にパーティションの刈り込みが行われる利点があります\n\nkatsubushi では、使用しているアルゴリズムの都合上、同時に動作する katsubushi プロセス間で重複のない 10bit の ID (worker ID) を持つ必要があります。\n\nコンテナ環境で利用する際には worker ID を人間が指定することが困難なため、バックエンドに Redis を使用して 0〜N の範囲で重複のない値を発番する Go のライブラリ [Raus](https://github.com/fujiwara/raus) を開発しました。これにより、コンテナ環境での実行も容易になりました。, talktime: 40min, author: fujiwara, githubid: fujiwara, twitterid: fujiwara, blogurl: http://sfujiwara.hatenablog.com/, timestamp: 2017/04/24, trackid: track-a, startat: 11:30"},"link":[{"rel":"self","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1iKaHh6Jpg0DTNeoE9NhwNf46GR130YLlB3V6oHdoTmU/o6gxhse/public/values/ciyn3"}],"gsx$id":{"$t":"13"},"gsx$title":{"$t":"分散ユニークID採番機katsubushiとWebアプリケーションへの応用例"},"gsx$description":{"$t":"面白法人カヤックでは、自社で開発したOSSの分散ユニークID採番機 [katsubushi](https://github.com/kayac/go-katsubushi) をWebアプリケーションの様々な場面で利用しています。\n\n本トークでは、katsubushi の機能、利用方法、Perl / Go で記述されたWebアプリケーションへの応用、コンテナ環境での運用方法などについて紹介します。\n\n## トーク詳細\n\nkatsubushi は、Twitter社 の Snowflake と同様のアルゴリズムにもとづいて、分散環境で重複のない 64bit 整数の ID を発行するためのソフトウェアです。Goで記述された daemon で、Memcached プロトコルでアクセスできます。\n\nもとは [Lobi](https://lobi.co) というサービス (大部分がPerlで記述されています) で、データベースをシャーディングする必要に迫られた際に、複数DB間で重複のないIDを発行するために開発されたものですが、その特性から、以下のような様々な用途にも利用されています。\n\n- リクエストIDとして\n  - nginxがリクエストを受け付けた時点で katsubushi ID を発行し、その後の全ての処理に引き渡すことで、各種処理の追跡を容易にします\n  - Plack::Middleware::SetLocalEnv を利用して、Plack 上で実行されている Web アプリケーション内の任意の箇所からリクエストIDを読み取れます\n  - Gearmand を経由した非同期処理のジョブや、MySQL へ発行するクエリにコメントでリクエストIDを埋め込むことで、問題のある処理の発見を容易にします\n\n- 日時でパーティショニングを行うテーブルのプライマリキーとして\n  - IDから発行日時を逆算できるため、MySQL のパーティショニングにおいてIDと日時の複合プライマリキーを設定することなく、ID のみでプライマリキー兼パーティションキーとして利用できます\n  - IDのみで検索クエリを実行した場合に、自動的にパーティションの刈り込みが行われる利点があります\n\nkatsubushi では、使用しているアルゴリズムの都合上、同時に動作する katsubushi プロセス間で重複のない 10bit の ID (worker ID) を持つ必要があります。\n\nコンテナ環境で利用する際には worker ID を人間が指定することが困難なため、バックエンドに Redis を使用して 0〜N の範囲で重複のない値を発番する Go のライブラリ [Raus](https://github.com/fujiwara/raus) を開発しました。これにより、コンテナ環境での実行も容易になりました。"},"gsx$talktime":{"$t":"40min"},"gsx$author":{"$t":"fujiwara"},"gsx$githubid":{"$t":"fujiwara"},"gsx$twitterid":{"$t":"fujiwara"},"gsx$blogurl":{"$t":"http://sfujiwara.hatenablog.com/"},"gsx$timestamp":{"$t":"2017/04/24"},"gsx$trackid":{"$t":"track-a"},"gsx$startat":{"$t":"11:30"}},{"id":{"$t":"https://spreadsheets.google.com/feeds/list/1iKaHh6Jpg0DTNeoE9NhwNf46GR130YLlB3V6oHdoTmU/o6gxhse/public/values/ckd7g"},"updated":{"$t":"2017-06-16T02:11:40.941Z"},"category":[{"scheme":"http://schemas.google.com/spreadsheets/2006","term":"http://schemas.google.com/spreadsheets/2006#list"}],"title":{"type":"text","$t":"10"},"content":{"type":"text","$t":"title: コンテナを「守る」仕組みから、中身を理解しよう！, description: 現在流行中の（特にLinuxの）コンテナ技術ですが、基本的に、その実態は普通の「プロセス」です。\n本トークでは、その「プロセス」を「コンテナ」たらしめ、母艦にある他のコンテナから独立した環境を提供するための技術や、安全性を保つセキュリティ関連の技術を切り口に、コンテナを支える中身について紹介します。かつ、Docker/Moby、LXC、あるいは発表者の開発したコンテナ Haconiwa のような、具体的なコンテナランタイム実装においてはどのように実現しているかも解説します。\n\n以下のような内容を含みます。\n\n* chroot/Linux namespace - OSリソースを隔離する技術について\n* cgroupによるOSリソース利用の制限について。pidsサブシステムを紹介\n* Kernel capabilityによる、権限の細かい絞り込みについて\n* seccompによるシステムコールのサンドボックス化について\n* Mandatory Access Control(MAC) について。apparmorの例を紹介\n, talktime: 40min, author: 近藤宇智朗, githubid: udzura, twitterid: udzura, blogurl: http://udzura.hatenablog.jp/, timestamp: 2017/04/21, trackid: track-b, startat: 11:30"},"link":[{"rel":"self","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1iKaHh6Jpg0DTNeoE9NhwNf46GR130YLlB3V6oHdoTmU/o6gxhse/public/values/ckd7g"}],"gsx$id":{"$t":"10"},"gsx$title":{"$t":"コンテナを「守る」仕組みから、中身を理解しよう！"},"gsx$description":{"$t":"現在流行中の（特にLinuxの）コンテナ技術ですが、基本的に、その実態は普通の「プロセス」です。\n本トークでは、その「プロセス」を「コンテナ」たらしめ、母艦にある他のコンテナから独立した環境を提供するための技術や、安全性を保つセキュリティ関連の技術を切り口に、コンテナを支える中身について紹介します。かつ、Docker/Moby、LXC、あるいは発表者の開発したコンテナ Haconiwa のような、具体的なコンテナランタイム実装においてはどのように実現しているかも解説します。\n\n以下のような内容を含みます。\n\n* chroot/Linux namespace - OSリソースを隔離する技術について\n* cgroupによるOSリソース利用の制限について。pidsサブシステムを紹介\n* Kernel capabilityによる、権限の細かい絞り込みについて\n* seccompによるシステムコールのサンドボックス化について\n* Mandatory Access Control(MAC) について。apparmorの例を紹介\n"},"gsx$talktime":{"$t":"40min"},"gsx$author":{"$t":"近藤宇智朗"},"gsx$githubid":{"$t":"udzura"},"gsx$twitterid":{"$t":"udzura"},"gsx$blogurl":{"$t":"http://udzura.hatenablog.jp/"},"gsx$timestamp":{"$t":"2017/04/21"},"gsx$trackid":{"$t":"track-b"},"gsx$startat":{"$t":"11:30"}},{"id":{"$t":"https://spreadsheets.google.com/feeds/list/1iKaHh6Jpg0DTNeoE9NhwNf46GR130YLlB3V6oHdoTmU/o6gxhse/public/values/clrrx"},"updated":{"$t":"2017-06-16T02:11:40.941Z"},"category":[{"scheme":"http://schemas.google.com/spreadsheets/2006","term":"http://schemas.google.com/spreadsheets/2006#list"}],"title":{"type":"text","$t":"34"},"content":{"type":"text","$t":"title: はてなブログ最近の開発テクニックと最新の開発風景のご紹介, description: はてなブログは2011年にリリースされ，2016年に5周年に突入，今年6年目になりますが，まだまだアクティブに開発しています．\n日々の開発を通じてうまくいった設計テクニックや，失敗したテクニックや，そのために開発したツール，などの開発テクニックと，それを使った，リモート開発を支える技術，未来に向けて考えていることなどを紹介します．\n2015年までの話は2015年のYAPC::Asiaで話したので，それ以降の話や，そこでは話せなかった最近の最新の話をします．\n\n# 話せるといいこと\n- 以前からのはてなブログの雰囲気を軽く紹介\n- アプリケーションの設計でうまくいった話や，試したけどイマイチだった設計の話\n- 開発を支援する便利グッズやリリースを楽にするツールやbotの活用の話\n- リモート開発をうまくやるための取り組みの話\n- 品質を維持するための普段の活動の話\n- 未来に向けてこういうことをやりたいという話, talktime: 20min, author: hitode909, githubid: hitode909, twitterid: hitode909hitode909, blogurl: http://blog.sushi.money/, timestamp: 2017/05/30, trackid: track-a, startat: 12:10"},"link":[{"rel":"self","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1iKaHh6Jpg0DTNeoE9NhwNf46GR130YLlB3V6oHdoTmU/o6gxhse/public/values/clrrx"}],"gsx$id":{"$t":"34"},"gsx$title":{"$t":"はてなブログ最近の開発テクニックと最新の開発風景のご紹介"},"gsx$description":{"$t":"はてなブログは2011年にリリースされ，2016年に5周年に突入，今年6年目になりますが，まだまだアクティブに開発しています．\n日々の開発を通じてうまくいった設計テクニックや，失敗したテクニックや，そのために開発したツール，などの開発テクニックと，それを使った，リモート開発を支える技術，未来に向けて考えていることなどを紹介します．\n2015年までの話は2015年のYAPC::Asiaで話したので，それ以降の話や，そこでは話せなかった最近の最新の話をします．\n\n# 話せるといいこと\n- 以前からのはてなブログの雰囲気を軽く紹介\n- アプリケーションの設計でうまくいった話や，試したけどイマイチだった設計の話\n- 開発を支援する便利グッズやリリースを楽にするツールやbotの活用の話\n- リモート開発をうまくやるための取り組みの話\n- 品質を維持するための普段の活動の話\n- 未来に向けてこういうことをやりたいという話"},"gsx$talktime":{"$t":"20min"},"gsx$author":{"$t":"hitode909"},"gsx$githubid":{"$t":"hitode909"},"gsx$twitterid":{"$t":"hitode909hitode909"},"gsx$blogurl":{"$t":"http://blog.sushi.money/"},"gsx$timestamp":{"$t":"2017/05/30"},"gsx$trackid":{"$t":"track-a"},"gsx$startat":{"$t":"12:10"}},{"id":{"$t":"https://spreadsheets.google.com/feeds/list/1iKaHh6Jpg0DTNeoE9NhwNf46GR130YLlB3V6oHdoTmU/o6gxhse/public/values/cyevm"},"updated":{"$t":"2017-06-16T02:11:40.941Z"},"category":[{"scheme":"http://schemas.google.com/spreadsheets/2006","term":"http://schemas.google.com/spreadsheets/2006#list"}],"title":{"type":"text","$t":"57"},"content":{"type":"text","$t":"title: システム障害をめぐる冒険, description: ― 完璧なシステムなどといったものは存在しない。\n完璧な絶望が存在しないようにね。―\n\n好むと好まざるとに関わらず、システムを運用する上で我々は障害を避けられません。\nシステム障害は突然やってくる(ようにみえる)ものです。\n\nシステム障害対応において、インシデント管理、体制・連絡フロー、ビジネスインパクトの評価、暫定/恒久対応の進め方についてはシステム管理プロセスとしてITILなどの体系を活用したり、社内標準プロセスを策定している場合も多いでしょう。\n\n一方、切り分けや障害原因の特定といった(前述に対していわゆる)下流の対応プロセスについては、時代とともに進化し続けるミドルウェアやフレームワーク、ツール類毎に詳細な対応手順を用意することは現実的ではないため、コンピューター、ソフトウェア技術について理解し、原理から障害を捉える必要があります。\n\n\n本セッションでは主にLinux系Webシステムを想定して、\n以下について＊技術的な視点＊から説明します。\n\n* 「障害」とは何か？(分類とその原理)\n* 障害の評価、ビジネスインパクト、一次対応の考え方\n* システムの特性毎の目星の付け方、切り分けの進め方\n* 定番ツール、perlやその他のワンライナーを活用したテクニック\n* 環境整備、再発対策の考え方\n, talktime: 20min, author: タケタニヒロト, githubid: htaketani, twitterid: take_3, timestamp: 2017/06/04, trackid: track-b, startat: 12:10"},"link":[{"rel":"self","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1iKaHh6Jpg0DTNeoE9NhwNf46GR130YLlB3V6oHdoTmU/o6gxhse/public/values/cyevm"}],"gsx$id":{"$t":"57"},"gsx$title":{"$t":"システム障害をめぐる冒険"},"gsx$description":{"$t":"― 完璧なシステムなどといったものは存在しない。\n完璧な絶望が存在しないようにね。―\n\n好むと好まざるとに関わらず、システムを運用する上で我々は障害を避けられません。\nシステム障害は突然やってくる(ようにみえる)ものです。\n\nシステム障害対応において、インシデント管理、体制・連絡フロー、ビジネスインパクトの評価、暫定/恒久対応の進め方についてはシステム管理プロセスとしてITILなどの体系を活用したり、社内標準プロセスを策定している場合も多いでしょう。\n\n一方、切り分けや障害原因の特定といった(前述に対していわゆる)下流の対応プロセスについては、時代とともに進化し続けるミドルウェアやフレームワーク、ツール類毎に詳細な対応手順を用意することは現実的ではないため、コンピューター、ソフトウェア技術について理解し、原理から障害を捉える必要があります。\n\n\n本セッションでは主にLinux系Webシステムを想定して、\n以下について＊技術的な視点＊から説明します。\n\n* 「障害」とは何か？(分類とその原理)\n* 障害の評価、ビジネスインパクト、一次対応の考え方\n* システムの特性毎の目星の付け方、切り分けの進め方\n* 定番ツール、perlやその他のワンライナーを活用したテクニック\n* 環境整備、再発対策の考え方\n"},"gsx$talktime":{"$t":"20min"},"gsx$author":{"$t":"タケタニヒロト"},"gsx$githubid":{"$t":"htaketani"},"gsx$twitterid":{"$t":"take_3"},"gsx$blogurl":{"$t":""},"gsx$timestamp":{"$t":"2017/06/04"},"gsx$trackid":{"$t":"track-b"},"gsx$startat":{"$t":"12:10"}},{"id":{"$t":"https://spreadsheets.google.com/feeds/list/1iKaHh6Jpg0DTNeoE9NhwNf46GR130YLlB3V6oHdoTmU/o6gxhse/public/values/cztg3"},"updated":{"$t":"2017-06-16T02:11:40.941Z"},"category":[{"scheme":"http://schemas.google.com/spreadsheets/2006","term":"http://schemas.google.com/spreadsheets/2006#list"}],"title":{"type":"text","$t":"28"},"content":{"type":"text","$t":"title: Web application good error messages and bad error messages, description: Webアプリケーションを作り，運用していると例外的な状況が発生するものです．\n例外的な状況 (エラー) は起きない (起こさない) に越したことはありませんが，しかしながらそれらをゼロにするのには相当のコストを要しますし，そもそも「本当にエラーが起きる余地が無いのかどうか」を証明するのも困難です (こうした問題領域を解決する為の手法やツールもありますが，そうしたものについては本トークでは触れません)．\n従って現実問題として，そうした例外的な状況に対応していく必要があります．そのような時にプリミティヴな武器として有効なもののひとつに「エラーメッセージをログに書き込んでおく」というものが挙げられると思います．また，エラーメッセージはサーバ内にログとして留めておくだけではなく，クライアントに対して表現する必要がある場合もあります．つまり，サーバ・クライアントを問わず，エラーメッセージは問題の修正・解決にとって重要な役割を果たしていると言うことが出来るでしょう．これはユーザ体験にも直結する要因のひとつとも言えます．\n\n本セッションでは\n\n- サーバ内部でのエラーメッセージ\n- 外部に提供するエラーメッセージ\n\nという2つの文脈について\n\n- 問題の「修正」に役立つエラーメッセージとは\n- 問題の「解決」に役立つエラーメッセージとは\n- エラーメッセージの粒度\n- エラーメッセージのレベル\n- エラーメッセージの検索性\n- perlにおけるロギング\n\nなどといった話題について触れたいと考えています．, talktime: 20min, author: moznion, githubid: moznion, twitterid: moznion, blogurl: http://moznion.hatenadiary.com/, timestamp: 2017/05/25, trackid: track-a, startat: 12:30"},"link":[{"rel":"self","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1iKaHh6Jpg0DTNeoE9NhwNf46GR130YLlB3V6oHdoTmU/o6gxhse/public/values/cztg3"}],"gsx$id":{"$t":"28"},"gsx$title":{"$t":"Web application good error messages and bad error messages"},"gsx$description":{"$t":"Webアプリケーションを作り，運用していると例外的な状況が発生するものです．\n例外的な状況 (エラー) は起きない (起こさない) に越したことはありませんが，しかしながらそれらをゼロにするのには相当のコストを要しますし，そもそも「本当にエラーが起きる余地が無いのかどうか」を証明するのも困難です (こうした問題領域を解決する為の手法やツールもありますが，そうしたものについては本トークでは触れません)．\n従って現実問題として，そうした例外的な状況に対応していく必要があります．そのような時にプリミティヴな武器として有効なもののひとつに「エラーメッセージをログに書き込んでおく」というものが挙げられると思います．また，エラーメッセージはサーバ内にログとして留めておくだけではなく，クライアントに対して表現する必要がある場合もあります．つまり，サーバ・クライアントを問わず，エラーメッセージは問題の修正・解決にとって重要な役割を果たしていると言うことが出来るでしょう．これはユーザ体験にも直結する要因のひとつとも言えます．\n\n本セッションでは\n\n- サーバ内部でのエラーメッセージ\n- 外部に提供するエラーメッセージ\n\nという2つの文脈について\n\n- 問題の「修正」に役立つエラーメッセージとは\n- 問題の「解決」に役立つエラーメッセージとは\n- エラーメッセージの粒度\n- エラーメッセージのレベル\n- エラーメッセージの検索性\n- perlにおけるロギング\n\nなどといった話題について触れたいと考えています．"},"gsx$talktime":{"$t":"20min"},"gsx$author":{"$t":"moznion"},"gsx$githubid":{"$t":"moznion"},"gsx$twitterid":{"$t":"moznion"},"gsx$blogurl":{"$t":"http://moznion.hatenadiary.com/"},"gsx$timestamp":{"$t":"2017/05/25"},"gsx$trackid":{"$t":"track-a"},"gsx$startat":{"$t":"12:30"}},{"id":{"$t":"https://spreadsheets.google.com/feeds/list/1iKaHh6Jpg0DTNeoE9NhwNf46GR130YLlB3V6oHdoTmU/o6gxhse/public/values/d180g"},"updated":{"$t":"2017-06-16T02:11:40.941Z"},"category":[{"scheme":"http://schemas.google.com/spreadsheets/2006","term":"http://schemas.google.com/spreadsheets/2006#list"}],"title":{"type":"text","$t":"40"},"content":{"type":"text","$t":"title: Productive Development Organization, description: 開発チームの生産性や開発力を高めるためには CI の導入やメンテナンス容易なコードベースの確保、コードレビューの習慣など様々なプラクティスが存在します。これらのプラクティスは書籍にもまとめられており、容易に習得と実践が可能な分野です。\nそれでは複数のチーム、さらには部署、会社全体の規模で生産性や開発力を高めるにはどのようなプラクティスを適用すれば良いのでしょうか?\n本発表では勤務先である GMO ペパボが取り組んでいる生産性向上への取り組みについて、GitHub/GitHub Enterprise の使い方、サービスをまたがる開発基盤の整備、人事/労務の制度改定など、実際にやったこと、その結果会社に訪れた変化についてご紹介します。, talktime: 20min, author: 柴田博志, githubid: hsbt, twitterid: hsbt, blogurl: https://www.hsbt.org/diary/, timestamp: 2017/06/02, trackid: track-b, startat: 12:30"},"link":[{"rel":"self","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1iKaHh6Jpg0DTNeoE9NhwNf46GR130YLlB3V6oHdoTmU/o6gxhse/public/values/d180g"}],"gsx$id":{"$t":"40"},"gsx$title":{"$t":"Productive Development Organization"},"gsx$description":{"$t":"開発チームの生産性や開発力を高めるためには CI の導入やメンテナンス容易なコードベースの確保、コードレビューの習慣など様々なプラクティスが存在します。これらのプラクティスは書籍にもまとめられており、容易に習得と実践が可能な分野です。\nそれでは複数のチーム、さらには部署、会社全体の規模で生産性や開発力を高めるにはどのようなプラクティスを適用すれば良いのでしょうか?\n本発表では勤務先である GMO ペパボが取り組んでいる生産性向上への取り組みについて、GitHub/GitHub Enterprise の使い方、サービスをまたがる開発基盤の整備、人事/労務の制度改定など、実際にやったこと、その結果会社に訪れた変化についてご紹介します。"},"gsx$talktime":{"$t":"20min"},"gsx$author":{"$t":"柴田博志"},"gsx$githubid":{"$t":"hsbt"},"gsx$twitterid":{"$t":"hsbt"},"gsx$blogurl":{"$t":"https://www.hsbt.org/diary/"},"gsx$timestamp":{"$t":"2017/06/02"},"gsx$trackid":{"$t":"track-b"},"gsx$startat":{"$t":"12:30"}},{"id":{"$t":"https://spreadsheets.google.com/feeds/list/1iKaHh6Jpg0DTNeoE9NhwNf46GR130YLlB3V6oHdoTmU/o6gxhse/public/values/d2mkx"},"updated":{"$t":"2017-06-16T02:11:40.941Z"},"category":[{"scheme":"http://schemas.google.com/spreadsheets/2006","term":"http://schemas.google.com/spreadsheets/2006#list"}],"title":{"type":"text","$t":"14"},"content":{"type":"text","$t":"title: 未来のプログラマー達へ ~Perl入学式卒業生から~, description: 2012年、大阪で始まったPerl入学式に受講生として1年間参加しました。\n  エンジニアではない1社会人が、趣味としてプログラミングを学んだ事により色々な事が得られました。その後も趣味としてプログラミングを続け、Perl入学式のスタッフとしてPerlのコミュニティに関わり続けています。\n  中でも、（私から見たら）異業種であるエンジニアの方々の考え方はとても新鮮で刺激があり、プログラムの書き方を学んだ事以外にも、OSSコミュニティへの関わり方や、コミットする事により得られたものが沢山ありました。これらの得られた事、どんな事に活かせているかなど、非エンジニアの目線でお話できれば、そしてエンジニアの方々が普段接する事のない異業種の人の話として、これからの人生に少しでも参考にしてもらえればと思います。(特に若い方へ), talktime: 20min, author: tomcha_, githubid: tomcha, twitterid: tomcha_, blogurl: http://tomcha.hatenablog.jp/, timestamp: 2017/04/24, trackid: track-b, startat: 13:40"},"link":[{"rel":"self","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1iKaHh6Jpg0DTNeoE9NhwNf46GR130YLlB3V6oHdoTmU/o6gxhse/public/values/d2mkx"}],"gsx$id":{"$t":"14"},"gsx$title":{"$t":"未来のプログラマー達へ ~Perl入学式卒業生から~"},"gsx$description":{"$t":"2012年、大阪で始まったPerl入学式に受講生として1年間参加しました。\n  エンジニアではない1社会人が、趣味としてプログラミングを学んだ事により色々な事が得られました。その後も趣味としてプログラミングを続け、Perl入学式のスタッフとしてPerlのコミュニティに関わり続けています。\n  中でも、（私から見たら）異業種であるエンジニアの方々の考え方はとても新鮮で刺激があり、プログラムの書き方を学んだ事以外にも、OSSコミュニティへの関わり方や、コミットする事により得られたものが沢山ありました。これらの得られた事、どんな事に活かせているかなど、非エンジニアの目線でお話できれば、そしてエンジニアの方々が普段接する事のない異業種の人の話として、これからの人生に少しでも参考にしてもらえればと思います。(特に若い方へ)"},"gsx$talktime":{"$t":"20min"},"gsx$author":{"$t":"tomcha_"},"gsx$githubid":{"$t":"tomcha"},"gsx$twitterid":{"$t":"tomcha_"},"gsx$blogurl":{"$t":"http://tomcha.hatenablog.jp/"},"gsx$timestamp":{"$t":"2017/04/24"},"gsx$trackid":{"$t":"track-b"},"gsx$startat":{"$t":"13:40"}},{"id":{"$t":"https://spreadsheets.google.com/feeds/list/1iKaHh6Jpg0DTNeoE9NhwNf46GR130YLlB3V6oHdoTmU/o6gxhse/public/values/cssly"},"updated":{"$t":"2017-06-16T02:11:40.941Z"},"category":[{"scheme":"http://schemas.google.com/spreadsheets/2006","term":"http://schemas.google.com/spreadsheets/2006#list"}],"title":{"type":"text","$t":"25"},"content":{"type":"text","$t":"title: 未来志向のCPANモジュール開発 - アイデアを生み出し実装する方法, description: オブジェクト指向、データベース、Web開発など、過去に作成したCPANモジュールを紹介しながら、どうやってアイデアを生み出すか、実装するときにどんな困難が生じて、どう解決してきたかを発表します。\n\n, talktime: 20min, author: 木本　裕紀, githubid: yuki-kimoto, twitterid: yukikimoto2, blogurl: http://d.hatena.ne.jp/perlcodesample/, timestamp: 2017/05/20, trackid: track-b, startat: 14:00"},"link":[{"rel":"self","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1iKaHh6Jpg0DTNeoE9NhwNf46GR130YLlB3V6oHdoTmU/o6gxhse/public/values/cssly"}],"gsx$id":{"$t":"25"},"gsx$title":{"$t":"未来志向のCPANモジュール開発 - アイデアを生み出し実装する方法"},"gsx$description":{"$t":"オブジェクト指向、データベース、Web開発など、過去に作成したCPANモジュールを紹介しながら、どうやってアイデアを生み出すか、実装するときにどんな困難が生じて、どう解決してきたかを発表します。\n\n"},"gsx$talktime":{"$t":"20min"},"gsx$author":{"$t":"木本　裕紀"},"gsx$githubid":{"$t":"yuki-kimoto"},"gsx$twitterid":{"$t":"yukikimoto2"},"gsx$blogurl":{"$t":"http://d.hatena.ne.jp/perlcodesample/"},"gsx$timestamp":{"$t":"2017/05/20"},"gsx$trackid":{"$t":"track-b"},"gsx$startat":{"$t":"14:00"}},{"id":{"$t":"https://spreadsheets.google.com/feeds/list/1iKaHh6Jpg0DTNeoE9NhwNf46GR130YLlB3V6oHdoTmU/o6gxhse/public/values/cu76f"},"updated":{"$t":"2017-06-16T02:11:40.941Z"},"category":[{"scheme":"http://schemas.google.com/spreadsheets/2006","term":"http://schemas.google.com/spreadsheets/2006#list"}],"title":{"type":"text","$t":"54"},"content":{"type":"text","$t":"title: P6W に基づく Perl6 に於ける Web 開発の基礎となる Crust, description: Perl6 に於ける Web 開発はどうあるべきか。\nPerl5 における事実上の標準となった PSGI とその Perl6 版の後継にあたる P６W。その代表的な実装となる Crust。\nその現況に、Crust のリードとして、どのような状況になっているのかを語る。, talktime: 20min, author: Tokuhiro Matsuno, githubid: tokuhirom, twitterid: tokuhirom, blogurl: http://blog.64p.org, timestamp: 2017/06/03, trackid: track-a, startat: 14:20"},"link":[{"rel":"self","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1iKaHh6Jpg0DTNeoE9NhwNf46GR130YLlB3V6oHdoTmU/o6gxhse/public/values/cu76f"}],"gsx$id":{"$t":"54"},"gsx$title":{"$t":"P6W に基づく Perl6 に於ける Web 開発の基礎となる Crust"},"gsx$description":{"$t":"Perl6 に於ける Web 開発はどうあるべきか。\nPerl5 における事実上の標準となった PSGI とその Perl6 版の後継にあたる P６W。その代表的な実装となる Crust。\nその現況に、Crust のリードとして、どのような状況になっているのかを語る。"},"gsx$talktime":{"$t":"20min"},"gsx$author":{"$t":"Tokuhiro Matsuno"},"gsx$githubid":{"$t":"tokuhirom"},"gsx$twitterid":{"$t":"tokuhirom"},"gsx$blogurl":{"$t":"http://blog.64p.org"},"gsx$timestamp":{"$t":"2017/06/03"},"gsx$trackid":{"$t":"track-a"},"gsx$startat":{"$t":"14:20"}},{"id":{"$t":"https://spreadsheets.google.com/feeds/list/1iKaHh6Jpg0DTNeoE9NhwNf46GR130YLlB3V6oHdoTmU/o6gxhse/public/values/cvlqs"},"updated":{"$t":"2017-06-16T02:11:40.941Z"},"category":[{"scheme":"http://schemas.google.com/spreadsheets/2006","term":"http://schemas.google.com/spreadsheets/2006#list"}],"title":{"type":"text","$t":"29"},"content":{"type":"text","$t":"title: Web API の未来, description: テーマが「未来」ということで Web API の未来についてみなさんと考えてみたいと思います。\nWeb API は RPC から REST に移り、フォーマットも XML から JSON に移り、この次の5年間のトレンドとして何が注目されるでしょうか。\nこの発表のキーワードは GraphQL です。\n現時点では GraphQL の CPAN モジュールを鋭意作成中ですが発表の頃には公開できていると思います。\n使い方も交えて GraphQL を紹介したいと思います。\nたたき台になるスライドのアジェンダは次の通りでした。\n\n- Web API の歴史の振り返り\n  - RPC\n  - XML-RPC\n  - REST + XML\n  - REST + JSON\n- GraphQL\n  - 簡単な例\n  - 使い所\n- 次の5年のまとめ\n\nこれを社内で話したらエモい部分だけで20分を使ってしまったので、もう少しスライドをブラッシュアップした上でエモさ半分コード半分くらいの内容でお話しできればいいなと思っています。, talktime: 20min, author: Takatsugu Shigeta, githubid: comewalk, twitterid: comewalk, blogurl: https://blog.comewalk.com/, timestamp: 2017/05/26, trackid: track-b, startat: 14:20"},"link":[{"rel":"self","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1iKaHh6Jpg0DTNeoE9NhwNf46GR130YLlB3V6oHdoTmU/o6gxhse/public/values/cvlqs"}],"gsx$id":{"$t":"29"},"gsx$title":{"$t":"Web API の未来"},"gsx$description":{"$t":"テーマが「未来」ということで Web API の未来についてみなさんと考えてみたいと思います。\nWeb API は RPC から REST に移り、フォーマットも XML から JSON に移り、この次の5年間のトレンドとして何が注目されるでしょうか。\nこの発表のキーワードは GraphQL です。\n現時点では GraphQL の CPAN モジュールを鋭意作成中ですが発表の頃には公開できていると思います。\n使い方も交えて GraphQL を紹介したいと思います。\nたたき台になるスライドのアジェンダは次の通りでした。\n\n- Web API の歴史の振り返り\n  - RPC\n  - XML-RPC\n  - REST + XML\n  - REST + JSON\n- GraphQL\n  - 簡単な例\n  - 使い所\n- 次の5年のまとめ\n\nこれを社内で話したらエモい部分だけで20分を使ってしまったので、もう少しスライドをブラッシュアップした上でエモさ半分コード半分くらいの内容でお話しできればいいなと思っています。"},"gsx$talktime":{"$t":"20min"},"gsx$author":{"$t":"Takatsugu Shigeta"},"gsx$githubid":{"$t":"comewalk"},"gsx$twitterid":{"$t":"comewalk"},"gsx$blogurl":{"$t":"https://blog.comewalk.com/"},"gsx$timestamp":{"$t":"2017/05/26"},"gsx$trackid":{"$t":"track-b"},"gsx$startat":{"$t":"14:20"}},{"id":{"$t":"https://spreadsheets.google.com/feeds/list/1iKaHh6Jpg0DTNeoE9NhwNf46GR130YLlB3V6oHdoTmU/o6gxhse/public/values/cx0b9"},"updated":{"$t":"2017-06-16T02:11:40.941Z"},"category":[{"scheme":"http://schemas.google.com/spreadsheets/2006","term":"http://schemas.google.com/spreadsheets/2006#list"}],"title":{"type":"text","$t":"48"},"content":{"type":"text","$t":"title: グローバルなエンジニアを目指す為の入門的な話, description: 本件では海外で利用されるシステムをPerlで構築した経験を元に、\nグローバル向けのシステムを構築する際の\nちょっとしたコツについてお話しさせて頂きたいと思います。\n\n主に多言語対応、文字コード、タイムゾーンなど\nシステムを構築する際の基本的な事項から\n日本では常識と考えているようなことでも\n文化の違いによって苦労した件、システム運用周りのトラブルなど、\n成功失敗の例などを交えながら話します。\n\n今後も様々な人々との関わりが持てるシステムが作られるように\n本トークが少しでも参考になれば幸いです。, talktime: 20min, author: YU, twitterid: yu_loveperl, timestamp: 2017/06/03, trackid: track-b, startat: 14:50"},"link":[{"rel":"self","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1iKaHh6Jpg0DTNeoE9NhwNf46GR130YLlB3V6oHdoTmU/o6gxhse/public/values/cx0b9"}],"gsx$id":{"$t":"48"},"gsx$title":{"$t":"グローバルなエンジニアを目指す為の入門的な話"},"gsx$description":{"$t":"本件では海外で利用されるシステムをPerlで構築した経験を元に、\nグローバル向けのシステムを構築する際の\nちょっとしたコツについてお話しさせて頂きたいと思います。\n\n主に多言語対応、文字コード、タイムゾーンなど\nシステムを構築する際の基本的な事項から\n日本では常識と考えているようなことでも\n文化の違いによって苦労した件、システム運用周りのトラブルなど、\n成功失敗の例などを交えながら話します。\n\n今後も様々な人々との関わりが持てるシステムが作られるように\n本トークが少しでも参考になれば幸いです。"},"gsx$talktime":{"$t":"20min"},"gsx$author":{"$t":"YU"},"gsx$githubid":{"$t":""},"gsx$twitterid":{"$t":"yu_loveperl"},"gsx$blogurl":{"$t":""},"gsx$timestamp":{"$t":"2017/06/03"},"gsx$trackid":{"$t":"track-b"},"gsx$startat":{"$t":"14:50"}},{"id":{"$t":"https://spreadsheets.google.com/feeds/list/1iKaHh6Jpg0DTNeoE9NhwNf46GR130YLlB3V6oHdoTmU/o6gxhse/public/values/d9ney"},"updated":{"$t":"2017-06-16T02:11:40.941Z"},"category":[{"scheme":"http://schemas.google.com/spreadsheets/2006","term":"http://schemas.google.com/spreadsheets/2006#list"}],"title":{"type":"text","$t":"18"},"content":{"type":"text","$t":"title: The plan of Aniki 2.0, description: 頼りがいのあるO/R Mapperを自称するAnikiのVer 2.0の狙いと新機能についてお話します。\n\nアジェンダ(仮):\n* Anikiの紹介\n* Aniki 2.0で実現したいこと\n* Aniki::Lint\n* Aniki::Cluster (Multi DB Support Plugin), talktime: 20min, author: karupanerura, githubid: karupanerura, twitterid: karupanerura, blogurl: http://techblog.karupas.org/, timestamp: 2017/05/02, trackid: track-a, startat: 15:10"},"link":[{"rel":"self","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1iKaHh6Jpg0DTNeoE9NhwNf46GR130YLlB3V6oHdoTmU/o6gxhse/public/values/d9ney"}],"gsx$id":{"$t":"18"},"gsx$title":{"$t":"The plan of Aniki 2.0"},"gsx$description":{"$t":"頼りがいのあるO/R Mapperを自称するAnikiのVer 2.0の狙いと新機能についてお話します。\n\nアジェンダ(仮):\n* Anikiの紹介\n* Aniki 2.0で実現したいこと\n* Aniki::Lint\n* Aniki::Cluster (Multi DB Support Plugin)"},"gsx$talktime":{"$t":"20min"},"gsx$author":{"$t":"karupanerura"},"gsx$githubid":{"$t":"karupanerura"},"gsx$twitterid":{"$t":"karupanerura"},"gsx$blogurl":{"$t":"http://techblog.karupas.org/"},"gsx$timestamp":{"$t":"2017/05/02"},"gsx$trackid":{"$t":"track-a"},"gsx$startat":{"$t":"15:10"}},{"id":{"$t":"https://spreadsheets.google.com/feeds/list/1iKaHh6Jpg0DTNeoE9NhwNf46GR130YLlB3V6oHdoTmU/o6gxhse/public/values/db1zf"},"updated":{"$t":"2017-06-16T02:11:40.941Z"},"category":[{"scheme":"http://schemas.google.com/spreadsheets/2006","term":"http://schemas.google.com/spreadsheets/2006#list"}],"title":{"type":"text","$t":"39"},"content":{"type":"text","$t":"title: サービスディレクターの意思決定を支える技術, description: サービスディレクターの仕事は意思決定の連続です。意思決定を行うためには、決定に関わる情報を取得し分析することが重要ですが、情報取得するにも工数がかかるのが悩みの種でした。\nそこで、Googleにより提供されているTagManager,Analytics,Spreadsheet,AppsScript,DataStudio,Optimizeなどのツールをディレクター自身が利用することで、エンジニアの稼働なしで、かつ自分で試行錯誤しながら意思決定の基となる情報を得る事ができるようになりました。\n本トークでは、具体的にディレクターだけでどのようなことができるのか、実際のサービス開発への活用、また、エンジニア不在によるデメリット、今後の展望について話します。\n\n## 対象者\n- 意思決定に悩むサービスディレクター\n- ディレクターの意思決定をサポートしたいと思っているエンジニア\n\n## 話すこと\n- Googleのツールを使うことで可能になることの紹介\n- 意思決定に関する活用方法\n  - 自身の意思決定ツールとして\n  - メンバーへの意志共有ツールとして\n- ディレクター単独での限界・デメリット\n- サービスのDBに入っているデータの活用など今後の展望, talktime: 20min, author: AirReader, githubid: airreader, twitterid: airreader, blogurl: airreader.hatenablog.com, timestamp: 2017/06/02, trackid: track-b, startat: 15:30"},"link":[{"rel":"self","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1iKaHh6Jpg0DTNeoE9NhwNf46GR130YLlB3V6oHdoTmU/o6gxhse/public/values/db1zf"}],"gsx$id":{"$t":"39"},"gsx$title":{"$t":"サービスディレクターの意思決定を支える技術"},"gsx$description":{"$t":"サービスディレクターの仕事は意思決定の連続です。意思決定を行うためには、決定に関わる情報を取得し分析することが重要ですが、情報取得するにも工数がかかるのが悩みの種でした。\nそこで、Googleにより提供されているTagManager,Analytics,Spreadsheet,AppsScript,DataStudio,Optimizeなどのツールをディレクター自身が利用することで、エンジニアの稼働なしで、かつ自分で試行錯誤しながら意思決定の基となる情報を得る事ができるようになりました。\n本トークでは、具体的にディレクターだけでどのようなことができるのか、実際のサービス開発への活用、また、エンジニア不在によるデメリット、今後の展望について話します。\n\n## 対象者\n- 意思決定に悩むサービスディレクター\n- ディレクターの意思決定をサポートしたいと思っているエンジニア\n\n## 話すこと\n- Googleのツールを使うことで可能になることの紹介\n- 意思決定に関する活用方法\n  - 自身の意思決定ツールとして\n  - メンバーへの意志共有ツールとして\n- ディレクター単独での限界・デメリット\n- サービスのDBに入っているデータの活用など今後の展望"},"gsx$talktime":{"$t":"20min"},"gsx$author":{"$t":"AirReader"},"gsx$githubid":{"$t":"airreader"},"gsx$twitterid":{"$t":"airreader"},"gsx$blogurl":{"$t":"airreader.hatenablog.com"},"gsx$timestamp":{"$t":"2017/06/02"},"gsx$trackid":{"$t":"track-b"},"gsx$startat":{"$t":"15:30"}},{"id":{"$t":"https://spreadsheets.google.com/feeds/list/1iKaHh6Jpg0DTNeoE9NhwNf46GR130YLlB3V6oHdoTmU/o6gxhse/public/values/dcgjs"},"updated":{"$t":"2017-06-16T02:11:40.941Z"},"category":[{"scheme":"http://schemas.google.com/spreadsheets/2006","term":"http://schemas.google.com/spreadsheets/2006#list"}],"title":{"type":"text","$t":"27"},"content":{"type":"text","$t":"title: Inside Evalpark - the evolution of sandboxing, description: Evalpark ( https://eval.dan.co.jp/ ) is a web API service which allows you to run any executable that FreeBSD 11 runs (even Linux binaries w/ linux64.ko).  Unlike other APIs like it, evalpark:\n\n* lets you fork() and exec() -- so you can | and \u0026 in your scripts\n* does not trace or intervene system calls\n* offers a full stack OS -- nothing omitted.  nothing customized.\n\nHow is it made possible?  Is it too dangerous?  How does it secure the service? \n\nThis session is the answer. \n\nOne more thing.  It is written in Perl!\n\nEvalpark ( https://eval.dan.co.jp/ )はFreeBSD 11で実行可能な任意のスクリプトを実行するweb APIです。linux64.koによりLinuxバイナリーすら実行可能です。同様のweb APIとは異なり、evalparkでは:\n\n* fork()やexec()も利用可能なので、|や\u0026も使えます\n* システムコール警察もいません\n* 省略なし、カスタマイズなしのフルスタックのOSが提供されます。\n\nどのようにしてそれが可能になったのか?どのようにして安全性を確保しているのか?本セッションで答えます。\n\nそうそう。本サービスはPerl製です!, talktime: 20min, author: Dan Kogai, githubid: dankogai, twitterid: dankogai, blogurl: http://blog.livedoor.jp/dankogai, timestamp: 2017/06/03, trackid: track-a, startat: 16:00"},"link":[{"rel":"self","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1iKaHh6Jpg0DTNeoE9NhwNf46GR130YLlB3V6oHdoTmU/o6gxhse/public/values/dcgjs"}],"gsx$id":{"$t":"27"},"gsx$title":{"$t":"Inside Evalpark - the evolution of sandboxing"},"gsx$description":{"$t":"Evalpark ( https://eval.dan.co.jp/ ) is a web API service which allows you to run any executable that FreeBSD 11 runs (even Linux binaries w/ linux64.ko).  Unlike other APIs like it, evalpark:\n\n* lets you fork() and exec() -- so you can | and \u0026 in your scripts\n* does not trace or intervene system calls\n* offers a full stack OS -- nothing omitted.  nothing customized.\n\nHow is it made possible?  Is it too dangerous?  How does it secure the service? \n\nThis session is the answer. \n\nOne more thing.  It is written in Perl!\n\nEvalpark ( https://eval.dan.co.jp/ )はFreeBSD 11で実行可能な任意のスクリプトを実行するweb APIです。linux64.koによりLinuxバイナリーすら実行可能です。同様のweb APIとは異なり、evalparkでは:\n\n* fork()やexec()も利用可能なので、|や\u0026も使えます\n* システムコール警察もいません\n* 省略なし、カスタマイズなしのフルスタックのOSが提供されます。\n\nどのようにしてそれが可能になったのか?どのようにして安全性を確保しているのか?本セッションで答えます。\n\nそうそう。本サービスはPerl製です!"},"gsx$talktime":{"$t":"20min"},"gsx$author":{"$t":"Dan Kogai"},"gsx$githubid":{"$t":"dankogai"},"gsx$twitterid":{"$t":"dankogai"},"gsx$blogurl":{"$t":"http://blog.livedoor.jp/dankogai"},"gsx$timestamp":{"$t":"2017/06/03"},"gsx$trackid":{"$t":"track-a"},"gsx$startat":{"$t":"16:00"}},{"id":{"$t":"https://spreadsheets.google.com/feeds/list/1iKaHh6Jpg0DTNeoE9NhwNf46GR130YLlB3V6oHdoTmU/o6gxhse/public/values/ddv49"},"updated":{"$t":"2017-06-16T02:11:40.941Z"},"category":[{"scheme":"http://schemas.google.com/spreadsheets/2006","term":"http://schemas.google.com/spreadsheets/2006#list"}],"title":{"type":"text","$t":"47"},"content":{"type":"text","$t":"title: 新時代のテストフレームワークTest2, description: Perlでテストを書く際によく使われているTest::Moreですが、古くは2001年から開発が始まりました。内部で使われているTest::Builderの拡張がしにくいという問題を抱えたまま、近年は開発が停滞していましたが、去年ついにリリースされたバージョン1.3以降では拡張しやすくテスタブルな形に書き直されています。\nこのトークではテストで使う基本的な関数の使い方から拡張方法まで、今あるテストをもっと書きやすく便利にする方法をお話しします。\n\n- Test::More 0.98系からTest2に移行するときの注意点\n- is_deeplyをisで書き換える\n- テスト結果の出力が見にくくて困っているところをTest2で解決する\n- Test::Fatal, Test::Deep, Test::Mock::Guardと様々なモジュールを使い分けしていたところをTest2::Suiteで統一する\n- utf8 hackなどのTest::Builderへのモンキーパッチをやめる\n- Test::Deepで書かれたテストを移行する, talktime: 20min, author: akiym, githubid: akiym, twitterid: akiym, blogurl: http://akiym.hateblo.jp, timestamp: 2017/06/03, trackid: track-b, startat: 16:00"},"link":[{"rel":"self","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1iKaHh6Jpg0DTNeoE9NhwNf46GR130YLlB3V6oHdoTmU/o6gxhse/public/values/ddv49"}],"gsx$id":{"$t":"47"},"gsx$title":{"$t":"新時代のテストフレームワークTest2"},"gsx$description":{"$t":"Perlでテストを書く際によく使われているTest::Moreですが、古くは2001年から開発が始まりました。内部で使われているTest::Builderの拡張がしにくいという問題を抱えたまま、近年は開発が停滞していましたが、去年ついにリリースされたバージョン1.3以降では拡張しやすくテスタブルな形に書き直されています。\nこのトークではテストで使う基本的な関数の使い方から拡張方法まで、今あるテストをもっと書きやすく便利にする方法をお話しします。\n\n- Test::More 0.98系からTest2に移行するときの注意点\n- is_deeplyをisで書き換える\n- テスト結果の出力が見にくくて困っているところをTest2で解決する\n- Test::Fatal, Test::Deep, Test::Mock::Guardと様々なモジュールを使い分けしていたところをTest2::Suiteで統一する\n- utf8 hackなどのTest::Builderへのモンキーパッチをやめる\n- Test::Deepで書かれたテストを移行する"},"gsx$talktime":{"$t":"20min"},"gsx$author":{"$t":"akiym"},"gsx$githubid":{"$t":"akiym"},"gsx$twitterid":{"$t":"akiym"},"gsx$blogurl":{"$t":"http://akiym.hateblo.jp"},"gsx$timestamp":{"$t":"2017/06/03"},"gsx$trackid":{"$t":"track-b"},"gsx$startat":{"$t":"16:00"}},{"id":{"$t":"https://spreadsheets.google.com/feeds/list/1iKaHh6Jpg0DTNeoE9NhwNf46GR130YLlB3V6oHdoTmU/o6gxhse/public/values/d415a"},"updated":{"$t":"2017-06-16T02:11:40.941Z"},"category":[{"scheme":"http://schemas.google.com/spreadsheets/2006","term":"http://schemas.google.com/spreadsheets/2006#list"}],"title":{"type":"text","$t":"36"},"content":{"type":"text","$t":"title: 巨大Perlプロジェクトに、Dockerが出会った, description: もはや未来の技術というより普遍的な技術になりつつあるコンテナ、Dockerですが、みなさんPerlのプロジェクトで活用されていますでしょうか?\n\nこのトークでは、筆者がDockerをPerlのプロジェクトに導入していくにあたってどう活用しているかという話をします。\n\nまだPerlで動いているプロジェクトの本番環境がDocker化されたわけではないので本番環境の話はしない予定ですが、既に動いているプロジェクトの開発環境にDockerを導入して開発環境を刷新していく話だけでもなかなか知見がたまっていますので、その辺について話をしていきます。\n\nたとえば…\n\ncarton installすると cpanfile.snapshot ができるけど、MacとLinuxでcpnafile.snapshot は別物になってしまうのでcpanfile.snapshot をgitで管理できないよなー\n → おっこれDocker入れたら解決できそうじゃないか?\n\n巨大プロジェクトのテストが遅すぎる! 大規模トピックブランチがあるとJenkinsのworkspaceのブランチ切り替えだけでもだいぶ遅くなるぞ!\n → おっこれDocker入れたら解決できそうじゃないか?\n\nみたいな感じの内容です。, talktime: 40min, author: acidlemon, githubid: acidlemon, twitterid: acidlemon, blogurl: https://beatsync.net/, timestamp: 2017/05/31, trackid: track-a, startat: 16:20"},"link":[{"rel":"self","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1iKaHh6Jpg0DTNeoE9NhwNf46GR130YLlB3V6oHdoTmU/o6gxhse/public/values/d415a"}],"gsx$id":{"$t":"36"},"gsx$title":{"$t":"巨大Perlプロジェクトに、Dockerが出会った"},"gsx$description":{"$t":"もはや未来の技術というより普遍的な技術になりつつあるコンテナ、Dockerですが、みなさんPerlのプロジェクトで活用されていますでしょうか?\n\nこのトークでは、筆者がDockerをPerlのプロジェクトに導入していくにあたってどう活用しているかという話をします。\n\nまだPerlで動いているプロジェクトの本番環境がDocker化されたわけではないので本番環境の話はしない予定ですが、既に動いているプロジェクトの開発環境にDockerを導入して開発環境を刷新していく話だけでもなかなか知見がたまっていますので、その辺について話をしていきます。\n\nたとえば…\n\ncarton installすると cpanfile.snapshot ができるけど、MacとLinuxでcpnafile.snapshot は別物になってしまうのでcpanfile.snapshot をgitで管理できないよなー\n → おっこれDocker入れたら解決できそうじゃないか?\n\n巨大プロジェクトのテストが遅すぎる! 大規模トピックブランチがあるとJenkinsのworkspaceのブランチ切り替えだけでもだいぶ遅くなるぞ!\n → おっこれDocker入れたら解決できそうじゃないか?\n\nみたいな感じの内容です。"},"gsx$talktime":{"$t":"40min"},"gsx$author":{"$t":"acidlemon"},"gsx$githubid":{"$t":"acidlemon"},"gsx$twitterid":{"$t":"acidlemon"},"gsx$blogurl":{"$t":"https://beatsync.net/"},"gsx$timestamp":{"$t":"2017/05/31"},"gsx$trackid":{"$t":"track-a"},"gsx$startat":{"$t":"16:20"}},{"id":{"$t":"https://spreadsheets.google.com/feeds/list/1iKaHh6Jpg0DTNeoE9NhwNf46GR130YLlB3V6oHdoTmU/o6gxhse/public/values/d5fpr"},"updated":{"$t":"2017-06-16T02:11:40.941Z"},"category":[{"scheme":"http://schemas.google.com/spreadsheets/2006","term":"http://schemas.google.com/spreadsheets/2006#list"}],"title":{"type":"text","$t":"3"},"content":{"type":"text","$t":"title: スキップしていいテスト、スキップしてはいけないテスト　〜速さと信頼を兼ねたテストコードを構築する術〜, description: さてみなさんテストを書いていますか？\nそして継続的にテストを実行していますか？\n\nテストを書かない、またはCIを回さない理由としては以下のような物が考えられます。\n\n- めんどくさい（わかる\n- テストの実行時間が長い（わかる\n- テストがコケたりコケなかったりする（わかる\n- テスト回してコケたらデプロイが出来ないルールとかだとデプロイがいつまで経ってもできない（わかる\n- そもそも人力テスト(QAなど)やってるし、要らんやろ（わかる\n- コード書いた人間が想定する壊れそうな部分しかテスト書かれないんだから意味ないやろ（わかる\n\nというなどなど挙げられます。\n\nこのトークでは、未来へ継続していくWebサービスアプリケーションを開発・運用する上で __あえて__ テストをスキップする話や、テストを高速化する技法、決め事、書き方などについて私や一緒に働いているチームのメンバーが考えたことについて話していきます。, talktime: 40min, author: macopy, githubid: mackee, twitterid: mackee_w, blogurl: http://mackee.hatenablog.com/, timestamp: 2017/03/14, trackid: track-b, startat: 16:20"},"link":[{"rel":"self","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1iKaHh6Jpg0DTNeoE9NhwNf46GR130YLlB3V6oHdoTmU/o6gxhse/public/values/d5fpr"}],"gsx$id":{"$t":"3"},"gsx$title":{"$t":"スキップしていいテスト、スキップしてはいけないテスト　〜速さと信頼を兼ねたテストコードを構築する術〜"},"gsx$description":{"$t":"さてみなさんテストを書いていますか？\nそして継続的にテストを実行していますか？\n\nテストを書かない、またはCIを回さない理由としては以下のような物が考えられます。\n\n- めんどくさい（わかる\n- テストの実行時間が長い（わかる\n- テストがコケたりコケなかったりする（わかる\n- テスト回してコケたらデプロイが出来ないルールとかだとデプロイがいつまで経ってもできない（わかる\n- そもそも人力テスト(QAなど)やってるし、要らんやろ（わかる\n- コード書いた人間が想定する壊れそうな部分しかテスト書かれないんだから意味ないやろ（わかる\n\nというなどなど挙げられます。\n\nこのトークでは、未来へ継続していくWebサービスアプリケーションを開発・運用する上で __あえて__ テストをスキップする話や、テストを高速化する技法、決め事、書き方などについて私や一緒に働いているチームのメンバーが考えたことについて話していきます。"},"gsx$talktime":{"$t":"40min"},"gsx$author":{"$t":"macopy"},"gsx$githubid":{"$t":"mackee"},"gsx$twitterid":{"$t":"mackee_w"},"gsx$blogurl":{"$t":"http://mackee.hatenablog.com/"},"gsx$timestamp":{"$t":"2017/03/14"},"gsx$trackid":{"$t":"track-b"},"gsx$startat":{"$t":"16:20"}}]}}