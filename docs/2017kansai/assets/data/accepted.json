{"version":"1.0","encoding":"UTF-8","feed":{"xmlns":"http://www.w3.org/2005/Atom","xmlns$openSearch":"http://a9.com/-/spec/opensearchrss/1.0/","xmlns$gsx":"http://schemas.google.com/spreadsheets/2006/extended","id":{"$t":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values"},"updated":{"$t":"2017-03-01T09:38:17.705Z"},"category":[{"scheme":"http://schemas.google.com/spreadsheets/2006","term":"http://schemas.google.com/spreadsheets/2006#list"}],"title":{"type":"text","$t":"accepted"},"link":[{"rel":"alternate","type":"application/atom+xml","href":"https://docs.google.com/spreadsheets/d/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/pubhtml"},{"rel":"http://schemas.google.com/g/2005#feed","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values"},{"rel":"http://schemas.google.com/g/2005#post","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values"},{"rel":"self","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values?alt\u003djson"}],"author":[{"name":{"$t":"karupanerura"},"email":{"$t":"karupanerura@perlassociation.org"}}],"openSearch$totalResults":{"$t":"28"},"openSearch$startIndex":{"$t":"1"},"entry":[{"id":{"$t":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/cokwr"},"updated":{"$t":"2017-03-01T09:38:17.705Z"},"category":[{"scheme":"http://schemas.google.com/spreadsheets/2006","term":"http://schemas.google.com/spreadsheets/2006#list"}],"title":{"type":"text","$t":"1"},"content":{"type":"text","$t":"title: メールフォームからメールを送る近代的な方法, description: これだけ多くの新しいコミュニケーション手段が普及した現代においても、メールという通信手段はなかなか消えないものです。\n\n信頼と実績、歴史と伝統のSMTPはまだまだ健在ですが、その煩雑さ故に古くからある通信手段にもかかわらず、多くの人が敬遠しがちでもあります。\n\n本トークでは、従来のSMTPを振り返り、そしてメールの複雑性や煩雑さをなるべく回避したHTTPでのメール送信手段についてお話をします。\n\n- 今までの方法(SMTP)\n    - /usr/sbin/sendmail\n    - ローカルなメールサーバへのSMTP\n    - 外部SMTPサーバへの認証付きSubmission\n- 近代的な方法(HTTP)\n    - Amazon SES\n    - SendGrid\n    - 他HTTPが喋れるSMTPサーバ\n- 送る前と送った後\n    - メールアドレスの妥当性検査\n    - 送れたかどうか\n, talktime: 20min, author: azumakuniyuki, githubid: azumakuniyuki, twitterid: azumakuniyuki, blogurl: http://azumakuniyuki.hatenablog.com, timestamp: 2017/02/27, trackid: track-c, startat: 10:20"},"link":[{"rel":"self","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/cokwr"}],"gsx$id":{"$t":"1"},"gsx$title":{"$t":"メールフォームからメールを送る近代的な方法"},"gsx$description":{"$t":"これだけ多くの新しいコミュニケーション手段が普及した現代においても、メールという通信手段はなかなか消えないものです。\n\n信頼と実績、歴史と伝統のSMTPはまだまだ健在ですが、その煩雑さ故に古くからある通信手段にもかかわらず、多くの人が敬遠しがちでもあります。\n\n本トークでは、従来のSMTPを振り返り、そしてメールの複雑性や煩雑さをなるべく回避したHTTPでのメール送信手段についてお話をします。\n\n- 今までの方法(SMTP)\n    - /usr/sbin/sendmail\n    - ローカルなメールサーバへのSMTP\n    - 外部SMTPサーバへの認証付きSubmission\n- 近代的な方法(HTTP)\n    - Amazon SES\n    - SendGrid\n    - 他HTTPが喋れるSMTPサーバ\n- 送る前と送った後\n    - メールアドレスの妥当性検査\n    - 送れたかどうか\n"},"gsx$talktime":{"$t":"20min"},"gsx$author":{"$t":"azumakuniyuki"},"gsx$githubid":{"$t":"azumakuniyuki"},"gsx$twitterid":{"$t":"azumakuniyuki"},"gsx$blogurl":{"$t":"http://azumakuniyuki.hatenablog.com"},"gsx$timestamp":{"$t":"2017/02/27"},"gsx$trackid":{"$t":"track-c"},"gsx$startat":{"$t":"10:20"}},{"id":{"$t":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/cpzh4"},"updated":{"$t":"2017-03-01T09:38:17.705Z"},"category":[{"scheme":"http://schemas.google.com/spreadsheets/2006","term":"http://schemas.google.com/spreadsheets/2006#list"}],"title":{"type":"text","$t":"3"},"content":{"type":"text","$t":"title: macOSネイティブアプリ作成におけるPerlの活用, description: Perl でOSネイティブのアプリケーションを作れたらいいなと思ったことはないでしょうか? 私はMovable TypeのクライアントアプリMAUS(https://alfasado.net/apps/maus-ja.html) やいくつかのmacOSアプリを作成・公開していますが、これらのアプリではPerlが活用されています。本トークセッションでは 統合開発環境Xojo(https://xojo.grapecity.com)でのアプリケーション開発にPerlを活用するTipsについてご紹介します。, talktime: 20min, author: 野田純生, githubid: junnama, twitterid: junnama, blogurl: http://junnama.alfasado.net/online/, timestamp: 2017/02/04, trackid: track-b, startat: 10:20"},"link":[{"rel":"self","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/cpzh4"}],"gsx$id":{"$t":"3"},"gsx$title":{"$t":"macOSネイティブアプリ作成におけるPerlの活用"},"gsx$description":{"$t":"Perl でOSネイティブのアプリケーションを作れたらいいなと思ったことはないでしょうか? 私はMovable TypeのクライアントアプリMAUS(https://alfasado.net/apps/maus-ja.html) やいくつかのmacOSアプリを作成・公開していますが、これらのアプリではPerlが活用されています。本トークセッションでは 統合開発環境Xojo(https://xojo.grapecity.com)でのアプリケーション開発にPerlを活用するTipsについてご紹介します。"},"gsx$talktime":{"$t":"20min"},"gsx$author":{"$t":"野田純生"},"gsx$githubid":{"$t":"junnama"},"gsx$twitterid":{"$t":"junnama"},"gsx$blogurl":{"$t":"http://junnama.alfasado.net/online/"},"gsx$timestamp":{"$t":"2017/02/04"},"gsx$trackid":{"$t":"track-b"},"gsx$startat":{"$t":"10:20"}},{"id":{"$t":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/cre1l"},"updated":{"$t":"2017-03-01T09:38:17.705Z"},"category":[{"scheme":"http://schemas.google.com/spreadsheets/2006","term":"http://schemas.google.com/spreadsheets/2006#list"}],"title":{"type":"text","$t":"5"},"content":{"type":"text","$t":"title: ビットコインを5分で試す, description: 自分で開発したライブレリー(libcbitcoin-perl)を活用して簡単なPKIをどうやって作れるかを説明します。, talktime: 20min, author: ジョエル・デヘスス, githubid: favioflamingo, twitterid: FavioFlamingo, timestamp: 2017/02/01, trackid: track-b, startat: 10:50"},"link":[{"rel":"self","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/cre1l"}],"gsx$id":{"$t":"5"},"gsx$title":{"$t":"ビットコインを5分で試す"},"gsx$description":{"$t":"自分で開発したライブレリー(libcbitcoin-perl)を活用して簡単なPKIをどうやって作れるかを説明します。"},"gsx$talktime":{"$t":"20min"},"gsx$author":{"$t":"ジョエル・デヘスス"},"gsx$githubid":{"$t":"favioflamingo"},"gsx$twitterid":{"$t":"FavioFlamingo"},"gsx$blogurl":{"$t":""},"gsx$timestamp":{"$t":"2017/02/01"},"gsx$trackid":{"$t":"track-b"},"gsx$startat":{"$t":"10:50"}},{"id":{"$t":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/chk2m"},"updated":{"$t":"2017-03-01T09:38:17.705Z"},"category":[{"scheme":"http://schemas.google.com/spreadsheets/2006","term":"http://schemas.google.com/spreadsheets/2006#list"}],"title":{"type":"text","$t":"6"},"content":{"type":"text","$t":"title: オープンデータを利用したWebアプリ開発, description: 総務省が公開しているオープンデータである国勢調査の人口情報を用いて、副業用店舗の出店場所の検討を支援するWebアプリ「副業の達人」を開発した。\n本アプリは、神奈川県情報サービス産業協会「アプリケーションコンテスト 2016」オープンデータ部門で最優秀賞を受賞した。\nサーバーサイドPerl(Mojolicious)である本アプリの実装について丁寧に解説いたします。\n, talktime: 20min, author: 立見　哲也, githubid: dokechin, twitterid: dokechin, timestamp: 2017/02/03, trackid: track-c, startat: 10:50"},"link":[{"rel":"self","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/chk2m"}],"gsx$id":{"$t":"6"},"gsx$title":{"$t":"オープンデータを利用したWebアプリ開発"},"gsx$description":{"$t":"総務省が公開しているオープンデータである国勢調査の人口情報を用いて、副業用店舗の出店場所の検討を支援するWebアプリ「副業の達人」を開発した。\n本アプリは、神奈川県情報サービス産業協会「アプリケーションコンテスト 2016」オープンデータ部門で最優秀賞を受賞した。\nサーバーサイドPerl(Mojolicious)である本アプリの実装について丁寧に解説いたします。\n"},"gsx$talktime":{"$t":"20min"},"gsx$author":{"$t":"立見　哲也"},"gsx$githubid":{"$t":"dokechin"},"gsx$twitterid":{"$t":"dokechin"},"gsx$blogurl":{"$t":""},"gsx$timestamp":{"$t":"2017/02/03"},"gsx$trackid":{"$t":"track-c"},"gsx$startat":{"$t":"10:50"}},{"id":{"$t":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/ciyn3"},"updated":{"$t":"2017-03-01T09:38:17.705Z"},"category":[{"scheme":"http://schemas.google.com/spreadsheets/2006","term":"http://schemas.google.com/spreadsheets/2006#list"}],"title":{"type":"text","$t":"7"},"content":{"type":"text","$t":"title: 2017年春のPerl, description: YAPC::Hokkaido 2016では2015年から2016年にかけてのPerl 5/6界隈の話をしました。それからわずか3ヶ月のうちに情勢が大きく変わることはないだろう、と思いきや、新年早々いくつかニュースが飛び込んできています。このトークでは、そのような最新情報やYAPC::Hokkaidoで話しそびれた内容を交えつつ、現在のPerl 5/6の状況を簡単にまとめていきます。, talktime: 40min, author: charsbar, githubid: charsbar, twitterid: charsbar, timestamp: 2017/01/10, trackid: track-a, startat: 11:20"},"link":[{"rel":"self","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/ciyn3"}],"gsx$id":{"$t":"7"},"gsx$title":{"$t":"2017年春のPerl"},"gsx$description":{"$t":"YAPC::Hokkaido 2016では2015年から2016年にかけてのPerl 5/6界隈の話をしました。それからわずか3ヶ月のうちに情勢が大きく変わることはないだろう、と思いきや、新年早々いくつかニュースが飛び込んできています。このトークでは、そのような最新情報やYAPC::Hokkaidoで話しそびれた内容を交えつつ、現在のPerl 5/6の状況を簡単にまとめていきます。"},"gsx$talktime":{"$t":"40min"},"gsx$author":{"$t":"charsbar"},"gsx$githubid":{"$t":"charsbar"},"gsx$twitterid":{"$t":"charsbar"},"gsx$blogurl":{"$t":""},"gsx$timestamp":{"$t":"2017/01/10"},"gsx$trackid":{"$t":"track-a"},"gsx$startat":{"$t":"11:20"}},{"id":{"$t":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/ckd7g"},"updated":{"$t":"2017-03-01T09:38:17.705Z"},"category":[{"scheme":"http://schemas.google.com/spreadsheets/2006","term":"http://schemas.google.com/spreadsheets/2006#list"}],"title":{"type":"text","$t":"13"},"content":{"type":"text","$t":"title: 高速化の初歩, description: プログラムを書いていて、処理速度を向上させる必要に迫られることは少なくありません。\n処理速度の向上に効果的な施策はいろいろありますが、ここではコード自体の高速化をメインに、押さえておくと良い基本的な事柄をご紹介します。\n（Perl に限定した話ではありませんが、事例やサンプルは Perl ベースで用意させていただきます）\n以下のような内容を予定しています。\n\n- 高速化が求められる事例の紹介\n- 高速化の選択肢\n- 実装の修正による高速化\n- 既存の良い解法の活用\n- 本当に高速化しなければならないのか, talktime: 20min, author: risou, githubid: risou, twitterid: risou, blogurl: http://blog.risouf.net, timestamp: 2017/02/03, trackid: track-b, startat: 11:20"},"link":[{"rel":"self","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/ckd7g"}],"gsx$id":{"$t":"13"},"gsx$title":{"$t":"高速化の初歩"},"gsx$description":{"$t":"プログラムを書いていて、処理速度を向上させる必要に迫られることは少なくありません。\n処理速度の向上に効果的な施策はいろいろありますが、ここではコード自体の高速化をメインに、押さえておくと良い基本的な事柄をご紹介します。\n（Perl に限定した話ではありませんが、事例やサンプルは Perl ベースで用意させていただきます）\n以下のような内容を予定しています。\n\n- 高速化が求められる事例の紹介\n- 高速化の選択肢\n- 実装の修正による高速化\n- 既存の良い解法の活用\n- 本当に高速化しなければならないのか"},"gsx$talktime":{"$t":"20min"},"gsx$author":{"$t":"risou"},"gsx$githubid":{"$t":"risou"},"gsx$twitterid":{"$t":"risou"},"gsx$blogurl":{"$t":"http://blog.risouf.net"},"gsx$timestamp":{"$t":"2017/02/03"},"gsx$trackid":{"$t":"track-b"},"gsx$startat":{"$t":"11:20"}},{"id":{"$t":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/clrrx"},"updated":{"$t":"2017-03-01T09:38:17.705Z"},"category":[{"scheme":"http://schemas.google.com/spreadsheets/2006","term":"http://schemas.google.com/spreadsheets/2006#list"}],"title":{"type":"text","$t":"14"},"content":{"type":"text","$t":"title: Elasticsearch 超入門, description: 最近巷で \"Elasticsearch\" という単語をよく聞くようになってきていませんか？でも、Elasticsearch ってなんだかよくわからない。全文検索エンジン？分析とかできるの？\n現在のサービスでは、検索やログの解析などは必須の分野になってきました。Elasticsearch はまさにそういうったユースケースにぴったりです。\nまた、通信プロトコルはHTTPですので、どんなプログラミング言語でも簡単にアクセすることができます。（もちろんPerlでもね）\nこのトークでは、Elasticsearch を3年ほどゆる～くサービスで使ってきた経験をもとに、主に全文検索の部分にフォーカスしてお話します。\n新しいミドルウェアの選択肢が増えることで、サービスの幅が広がること間違いなしです。, talktime: 20min, author: xaicron, githubid: xaicron, twitterid: xaicron, blogurl: http://blog.livedoor.jp/xaicron/, timestamp: 2017/02/04, trackid: track-c, startat: 11:20"},"link":[{"rel":"self","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/clrrx"}],"gsx$id":{"$t":"14"},"gsx$title":{"$t":"Elasticsearch 超入門"},"gsx$description":{"$t":"最近巷で \"Elasticsearch\" という単語をよく聞くようになってきていませんか？でも、Elasticsearch ってなんだかよくわからない。全文検索エンジン？分析とかできるの？\n現在のサービスでは、検索やログの解析などは必須の分野になってきました。Elasticsearch はまさにそういうったユースケースにぴったりです。\nまた、通信プロトコルはHTTPですので、どんなプログラミング言語でも簡単にアクセすることができます。（もちろんPerlでもね）\nこのトークでは、Elasticsearch を3年ほどゆる～くサービスで使ってきた経験をもとに、主に全文検索の部分にフォーカスしてお話します。\n新しいミドルウェアの選択肢が増えることで、サービスの幅が広がること間違いなしです。"},"gsx$talktime":{"$t":"20min"},"gsx$author":{"$t":"xaicron"},"gsx$githubid":{"$t":"xaicron"},"gsx$twitterid":{"$t":"xaicron"},"gsx$blogurl":{"$t":"http://blog.livedoor.jp/xaicron/"},"gsx$timestamp":{"$t":"2017/02/04"},"gsx$trackid":{"$t":"track-c"},"gsx$startat":{"$t":"11:20"}},{"id":{"$t":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/cyevm"},"updated":{"$t":"2017-03-01T09:38:17.705Z"},"category":[{"scheme":"http://schemas.google.com/spreadsheets/2006","term":"http://schemas.google.com/spreadsheets/2006#list"}],"title":{"type":"text","$t":"15"},"content":{"type":"text","$t":"title: Vue.jsで作るSPAから学ぶMVVM、非同期処理、その光と影, description: SPA(SinglePageApplication)を実装するとき、わたしたちはブラウザというプラットフォームで動くGUIアプリケーションを作成する困難にぶち当たることになります。そこには、「ページ遷移でリセットされない状態の管理」という大きな問題があります。それどころか、「そもそもどのようなURLにアクセスしているのか」が新たな「管理すべき状態」となります。つまり、SPAの開発を「よく」行うためには、今までのweb開発のような「ページ遷移の際は全部まっさらにリセットしてサーバーにリクエストしてレスポンスをレンダリングする」というようなステートレスな考え方から離れ、考え方自体をネイティブアプリケーションのようなステートフルな考え方にシフトしていく必要があります。\n\nこのトークでは、「ブラウザ上でGUIアプリケーションを実現する」という焦点に対し、\n\n* そもそもGUIアーキテクチャパターンの考え方\n* ブラウザアプリ特有の問題\n* 非同期処理特有の問題\n\nについて、生の失敗事例、成功事例についてお話できればと思います。, talktime: 20min, author: しんぺい a.k.a. 猫型蓄音機, githubid: Shinpeim, twitterid: neko_gata_s, blogurl: http://nekogata.hatenablog.com/, timestamp: 2017/02/01, trackid: track-b, startat: 11:40"},"link":[{"rel":"self","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/cyevm"}],"gsx$id":{"$t":"15"},"gsx$title":{"$t":"Vue.jsで作るSPAから学ぶMVVM、非同期処理、その光と影"},"gsx$description":{"$t":"SPA(SinglePageApplication)を実装するとき、わたしたちはブラウザというプラットフォームで動くGUIアプリケーションを作成する困難にぶち当たることになります。そこには、「ページ遷移でリセットされない状態の管理」という大きな問題があります。それどころか、「そもそもどのようなURLにアクセスしているのか」が新たな「管理すべき状態」となります。つまり、SPAの開発を「よく」行うためには、今までのweb開発のような「ページ遷移の際は全部まっさらにリセットしてサーバーにリクエストしてレスポンスをレンダリングする」というようなステートレスな考え方から離れ、考え方自体をネイティブアプリケーションのようなステートフルな考え方にシフトしていく必要があります。\n\nこのトークでは、「ブラウザ上でGUIアプリケーションを実現する」という焦点に対し、\n\n* そもそもGUIアーキテクチャパターンの考え方\n* ブラウザアプリ特有の問題\n* 非同期処理特有の問題\n\nについて、生の失敗事例、成功事例についてお話できればと思います。"},"gsx$talktime":{"$t":"20min"},"gsx$author":{"$t":"しんぺい a.k.a. 猫型蓄音機"},"gsx$githubid":{"$t":"Shinpeim"},"gsx$twitterid":{"$t":"neko_gata_s"},"gsx$blogurl":{"$t":"http://nekogata.hatenablog.com/"},"gsx$timestamp":{"$t":"2017/02/01"},"gsx$trackid":{"$t":"track-b"},"gsx$startat":{"$t":"11:40"}},{"id":{"$t":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/cztg3"},"updated":{"$t":"2017-03-01T09:38:17.705Z"},"category":[{"scheme":"http://schemas.google.com/spreadsheets/2006","term":"http://schemas.google.com/spreadsheets/2006#list"}],"title":{"type":"text","$t":"16"},"content":{"type":"text","$t":"title: Elasticsearch で作る ranking system のスヽメ, description: \n古くからネットサービスに存在している Ranking System、よくあるものでは MySQL などを使っています。そして、より QPS を稼ぎたい場合には Redis が重宝されてきました。\nしかし、サービス競争がより加速化した昨今は Ranking Logic の複雑性が増してきます。しかし、我々エンジニアには複雑な Ranking Logic のメンテナンスを頑張るだけの時間が与えられてない！！\nそこで、我々は Elasticsearch を使い Ranking Logic の記述量を下げて高速に開発を回すことに成功しました！！！\n本セッションでは、よく使われている手法に何が問題があり、それを Elasticsearch を使うことでどう解決したのか、そして出て来る新しい問題などを可能な限り CPAN Module 交えつつ紹介したいと思います。, talktime: 20min, author: Yappo, githubid: yappo, twitterid: Yappo, blogurl: http://blog.yappo.jp/, timestamp: 2017/02/03, trackid: track-c, startat: 11:40"},"link":[{"rel":"self","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/cztg3"}],"gsx$id":{"$t":"16"},"gsx$title":{"$t":"Elasticsearch で作る ranking system のスヽメ"},"gsx$description":{"$t":"\n古くからネットサービスに存在している Ranking System、よくあるものでは MySQL などを使っています。そして、より QPS を稼ぎたい場合には Redis が重宝されてきました。\nしかし、サービス競争がより加速化した昨今は Ranking Logic の複雑性が増してきます。しかし、我々エンジニアには複雑な Ranking Logic のメンテナンスを頑張るだけの時間が与えられてない！！\nそこで、我々は Elasticsearch を使い Ranking Logic の記述量を下げて高速に開発を回すことに成功しました！！！\n本セッションでは、よく使われている手法に何が問題があり、それを Elasticsearch を使うことでどう解決したのか、そして出て来る新しい問題などを可能な限り CPAN Module 交えつつ紹介したいと思います。"},"gsx$talktime":{"$t":"20min"},"gsx$author":{"$t":"Yappo"},"gsx$githubid":{"$t":"yappo"},"gsx$twitterid":{"$t":"Yappo"},"gsx$blogurl":{"$t":"http://blog.yappo.jp/"},"gsx$timestamp":{"$t":"2017/02/03"},"gsx$trackid":{"$t":"track-c"},"gsx$startat":{"$t":"11:40"}},{"id":{"$t":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/d180g"},"updated":{"$t":"2017-03-01T09:38:17.705Z"},"category":[{"scheme":"http://schemas.google.com/spreadsheets/2006","term":"http://schemas.google.com/spreadsheets/2006#list"}],"title":{"type":"text","$t":"18"},"content":{"type":"text","$t":"title: Perl入学式座談会 〜これまでの軌跡を振り返り, そして未来へ〜, description: Perlの初心者向け勉強会, ｢Perl入学式｣は, 2011年に大阪で始まりました.\nあれから5年, 今年度は東京, 大阪, 沖縄の3会場で開催されており, 述べ50人以上のPerl Mongerを育てることができました.\nその中には, 今でもPerlコミュニティと関わりを持ち続けている方, Perl入学式のスタッフになった方, あるいはこれをきっかけに, Perlを活用している会社に転職された事例も出てきています.\n\n今回, YAPC::Japanが｢温故知新｣をテーマにしてPerl入学式の生まれた場所, 大阪にやってくるということで, Perl入学式も｢温故知新｣をしたいと思います.\nこれまでの歴史を振り返りつつ, そしてPerl入学式の未来について, Perl入学式のスタッフやOB/OGを交えて, 座談会形式でお送りします.\n\n以下のテーマについてお送りする予定です:\n\n- Perl入学式のこれまでの歴史について\n- Perl入学式での忘れられないエピソード\n- Perl入学式の良いところ, 悪いところ\n- なぜPerl入学式をやっているのか/参加したのか\n- これからのPerl入学式について\n\n当日の登壇者については, (採択が決まったら)発表します! お楽しみに., talktime: 40min, author: Perl入学式, githubid: perl_entrance, twitterid: Perl_Entrance, blogurl: http://blog.perl-entrance.org/, timestamp: 2017/01/13, trackid: track-c, startat: 12:10"},"link":[{"rel":"self","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/d180g"}],"gsx$id":{"$t":"18"},"gsx$title":{"$t":"Perl入学式座談会 〜これまでの軌跡を振り返り, そして未来へ〜"},"gsx$description":{"$t":"Perlの初心者向け勉強会, ｢Perl入学式｣は, 2011年に大阪で始まりました.\nあれから5年, 今年度は東京, 大阪, 沖縄の3会場で開催されており, 述べ50人以上のPerl Mongerを育てることができました.\nその中には, 今でもPerlコミュニティと関わりを持ち続けている方, Perl入学式のスタッフになった方, あるいはこれをきっかけに, Perlを活用している会社に転職された事例も出てきています.\n\n今回, YAPC::Japanが｢温故知新｣をテーマにしてPerl入学式の生まれた場所, 大阪にやってくるということで, Perl入学式も｢温故知新｣をしたいと思います.\nこれまでの歴史を振り返りつつ, そしてPerl入学式の未来について, Perl入学式のスタッフやOB/OGを交えて, 座談会形式でお送りします.\n\n以下のテーマについてお送りする予定です:\n\n- Perl入学式のこれまでの歴史について\n- Perl入学式での忘れられないエピソード\n- Perl入学式の良いところ, 悪いところ\n- なぜPerl入学式をやっているのか/参加したのか\n- これからのPerl入学式について\n\n当日の登壇者については, (採択が決まったら)発表します! お楽しみに."},"gsx$talktime":{"$t":"40min"},"gsx$author":{"$t":"Perl入学式"},"gsx$githubid":{"$t":"perl_entrance"},"gsx$twitterid":{"$t":"Perl_Entrance"},"gsx$blogurl":{"$t":"http://blog.perl-entrance.org/"},"gsx$timestamp":{"$t":"2017/01/13"},"gsx$trackid":{"$t":"track-c"},"gsx$startat":{"$t":"12:10"}},{"id":{"$t":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/d2mkx"},"updated":{"$t":"2017-03-01T09:38:17.705Z"},"category":[{"scheme":"http://schemas.google.com/spreadsheets/2006","term":"http://schemas.google.com/spreadsheets/2006#list"}],"title":{"type":"text","$t":"20"},"content":{"type":"text","$t":"title: レガシーな Perl システムに DDD(ドメイン駆動設計) を取り入れる, description: 10年超運用されている Perl で構築された大規模システムにおいて、DDD(ドメイン駆動設計)を\n取り入れた時の話をします。システムの運用が長くなると、新規機能の追加においても、\n過去のコード資産に引きずられた設計になりがちです。\nそのような中で、ドメイン駆動という新しい概念をシステムにどうやって持ち込み、\nどのように実践したかをお話させていただきます。, talktime: 40min, author: さい, githubid: sairoutine, twitterid: sairoutine, blogurl: http://sairoutine.hatenablog.com/, timestamp: 2017/01/17, trackid: track-b, startat: 12:10"},"link":[{"rel":"self","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/d2mkx"}],"gsx$id":{"$t":"20"},"gsx$title":{"$t":"レガシーな Perl システムに DDD(ドメイン駆動設計) を取り入れる"},"gsx$description":{"$t":"10年超運用されている Perl で構築された大規模システムにおいて、DDD(ドメイン駆動設計)を\n取り入れた時の話をします。システムの運用が長くなると、新規機能の追加においても、\n過去のコード資産に引きずられた設計になりがちです。\nそのような中で、ドメイン駆動という新しい概念をシステムにどうやって持ち込み、\nどのように実践したかをお話させていただきます。"},"gsx$talktime":{"$t":"40min"},"gsx$author":{"$t":"さい"},"gsx$githubid":{"$t":"sairoutine"},"gsx$twitterid":{"$t":"sairoutine"},"gsx$blogurl":{"$t":"http://sairoutine.hatenablog.com/"},"gsx$timestamp":{"$t":"2017/01/17"},"gsx$trackid":{"$t":"track-b"},"gsx$startat":{"$t":"12:10"}},{"id":{"$t":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/cssly"},"updated":{"$t":"2017-03-01T09:38:17.705Z"},"category":[{"scheme":"http://schemas.google.com/spreadsheets/2006","term":"http://schemas.google.com/spreadsheets/2006#list"}],"title":{"type":"text","$t":"22"},"content":{"type":"text","$t":"title: Webアプリケーションのキャッシュ戦略とそのパターン, description: Webアプリケーションの規模がある程度大きくなってくると，キャッシュと上手に付き合っていく必要が出てくることが多くあります (ありませんか？　それはたいへん尊く，幸せなことです！)．\n本セッションではそのようなWebアプリケーションにおける *現実的な用法* のキャッシュについて話をしたいと考えています．トピックとしては以下のとおりです (予告なく変更される場合があります)．\n\n- キャッシュとは何か\n- なぜキャッシュを使うのか\n- キャッシュのストレージをどうすべきか\n- キャッシュの実装・設計パターンについて\n- クライアントサイドのキャッシュについて\n- キャッシュ有効環境下でのトラブルシューティング\n- どういうときにキャッシュを使うべき (あるいは使わないべき) なのか\n- キャッシュは麻薬 (from 株式会社はてな)\n\n対象としては規模感のあるWebアプリケーションを開発・運用しているエンジニアの方や，キャッシュでお困り・お悩みのエンジニアの方，「キャッシングしてみたいんだけどなんだか怖いわ……」というエンジニアの方を考えています．, talktime: 40min, author: moznion, githubid: moznion, twitterid: moznion, blogurl: http://moznion.hatenadiary.com/, timestamp: 2017/01/20, trackid: track-a, startat: 12:10"},"link":[{"rel":"self","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/cssly"}],"gsx$id":{"$t":"22"},"gsx$title":{"$t":"Webアプリケーションのキャッシュ戦略とそのパターン"},"gsx$description":{"$t":"Webアプリケーションの規模がある程度大きくなってくると，キャッシュと上手に付き合っていく必要が出てくることが多くあります (ありませんか？　それはたいへん尊く，幸せなことです！)．\n本セッションではそのようなWebアプリケーションにおける *現実的な用法* のキャッシュについて話をしたいと考えています．トピックとしては以下のとおりです (予告なく変更される場合があります)．\n\n- キャッシュとは何か\n- なぜキャッシュを使うのか\n- キャッシュのストレージをどうすべきか\n- キャッシュの実装・設計パターンについて\n- クライアントサイドのキャッシュについて\n- キャッシュ有効環境下でのトラブルシューティング\n- どういうときにキャッシュを使うべき (あるいは使わないべき) なのか\n- キャッシュは麻薬 (from 株式会社はてな)\n\n対象としては規模感のあるWebアプリケーションを開発・運用しているエンジニアの方や，キャッシュでお困り・お悩みのエンジニアの方，「キャッシングしてみたいんだけどなんだか怖いわ……」というエンジニアの方を考えています．"},"gsx$talktime":{"$t":"40min"},"gsx$author":{"$t":"moznion"},"gsx$githubid":{"$t":"moznion"},"gsx$twitterid":{"$t":"moznion"},"gsx$blogurl":{"$t":"http://moznion.hatenadiary.com/"},"gsx$timestamp":{"$t":"2017/01/20"},"gsx$trackid":{"$t":"track-a"},"gsx$startat":{"$t":"12:10"}},{"id":{"$t":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/cu76f"},"updated":{"$t":"2017-03-01T09:38:17.705Z"},"category":[{"scheme":"http://schemas.google.com/spreadsheets/2006","term":"http://schemas.google.com/spreadsheets/2006#list"}],"title":{"type":"text","$t":"23"},"content":{"type":"text","$t":"title: コミュニティを開発していた元RubyエンジニアがPerlでゲーム開発を始めて感じたこと, description: 元RubyエンジニアがPerlでゲーム開発を始めた時に感じた技術的なギャップ、良いと感じた所や物足りなかっところなど。Perlで開発し始めて感じた事、Perlの利点をつらつらと語りたいと思います！, talktime: 20min, author: 森　啓介, timestamp: 2017/01/24, trackid: track-c, startat: 13:40"},"link":[{"rel":"self","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/cu76f"}],"gsx$id":{"$t":"23"},"gsx$title":{"$t":"コミュニティを開発していた元RubyエンジニアがPerlでゲーム開発を始めて感じたこと"},"gsx$description":{"$t":"元RubyエンジニアがPerlでゲーム開発を始めた時に感じた技術的なギャップ、良いと感じた所や物足りなかっところなど。Perlで開発し始めて感じた事、Perlの利点をつらつらと語りたいと思います！"},"gsx$talktime":{"$t":"20min"},"gsx$author":{"$t":"森　啓介"},"gsx$githubid":{"$t":""},"gsx$twitterid":{"$t":""},"gsx$blogurl":{"$t":""},"gsx$timestamp":{"$t":"2017/01/24"},"gsx$trackid":{"$t":"track-c"},"gsx$startat":{"$t":"13:40"}},{"id":{"$t":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/cvlqs"},"updated":{"$t":"2017-03-01T09:38:17.705Z"},"category":[{"scheme":"http://schemas.google.com/spreadsheets/2006","term":"http://schemas.google.com/spreadsheets/2006#list"}],"title":{"type":"text","$t":"24"},"content":{"type":"text","$t":"title: Mojoliciousではじめるマイクロサービスアーキテクチャ, description: モノリシックに配置されたアプリに限界を感じてませんか？\n各アプリにいくつも出てくる共通ロジック。\n「そろそろコピペではダメだ！」\nそこで今話題の「マイクロサービス」化しよう！と思うわけです。\nしかし、マイクロサービス自体、複雑なもので、私(たち)程度の\n小規模では逆に導入障壁が高く、ミドルウェアにやられてしまう、\nそう思われている事でしょう。\nここに、Perl Mojoliciousベースで小さくマイクロサービスを構築する方法があります！\nサービスの規模に合わせて、マイクロサービス化やっていきましょう。\nそれと少しOkinawa.pmのご紹介。, talktime: 20min, author: さいとう まさあき（masakyst）, githubid: masakyst, twitterid: masakyst, blogurl: http://okinawa.pm.org/, timestamp: 2017/02/04, trackid: track-b, startat: 13:40"},"link":[{"rel":"self","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/cvlqs"}],"gsx$id":{"$t":"24"},"gsx$title":{"$t":"Mojoliciousではじめるマイクロサービスアーキテクチャ"},"gsx$description":{"$t":"モノリシックに配置されたアプリに限界を感じてませんか？\n各アプリにいくつも出てくる共通ロジック。\n「そろそろコピペではダメだ！」\nそこで今話題の「マイクロサービス」化しよう！と思うわけです。\nしかし、マイクロサービス自体、複雑なもので、私(たち)程度の\n小規模では逆に導入障壁が高く、ミドルウェアにやられてしまう、\nそう思われている事でしょう。\nここに、Perl Mojoliciousベースで小さくマイクロサービスを構築する方法があります！\nサービスの規模に合わせて、マイクロサービス化やっていきましょう。\nそれと少しOkinawa.pmのご紹介。"},"gsx$talktime":{"$t":"20min"},"gsx$author":{"$t":"さいとう まさあき（masakyst）"},"gsx$githubid":{"$t":"masakyst"},"gsx$twitterid":{"$t":"masakyst"},"gsx$blogurl":{"$t":"http://okinawa.pm.org/"},"gsx$timestamp":{"$t":"2017/02/04"},"gsx$trackid":{"$t":"track-b"},"gsx$startat":{"$t":"13:40"}},{"id":{"$t":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/cx0b9"},"updated":{"$t":"2017-03-01T09:38:17.705Z"},"category":[{"scheme":"http://schemas.google.com/spreadsheets/2006","term":"http://schemas.google.com/spreadsheets/2006#list"}],"title":{"type":"text","$t":"27"},"content":{"type":"text","$t":"title: Perl でわかる！サーバレス, description: 世はまさに大サーバレス時代。しかしJSやJava、C#がメインでPerlはこのジャンルでは置いて行かれているように思われます。\nYAPC参加者の皆様の中には \"Perlでサーバレスしたい！\" とお考えの方もきっと多いのではないでしょうか。\n\nご安心ください、Perlでもサーバレスは(やろうと思えば)できるんです。\n本セッションでは、\"そもそもサーバレスがよくわからないのでどうやって理解したらいいの？\" という方に向けて、Perlならではのアプローチで理解を深めつつ、Perlでできるサーバレスアーキテクチャに関して、いくつかのプラットフォームとその活用方法について話をしたいと思います。\n\nkeyword: Serverless, Cloud, Container, Microsoft Azure, OpenWhisk, etc., talktime: 20min, author: Tatsuro Hisamori, githubid: myfinder, twitterid: myfinder, blogurl: myfinder.hatenablog.com, timestamp: 2017/02/26, trackid: track-b, startat: 14:00"},"link":[{"rel":"self","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/cx0b9"}],"gsx$id":{"$t":"27"},"gsx$title":{"$t":"Perl でわかる！サーバレス"},"gsx$description":{"$t":"世はまさに大サーバレス時代。しかしJSやJava、C#がメインでPerlはこのジャンルでは置いて行かれているように思われます。\nYAPC参加者の皆様の中には \"Perlでサーバレスしたい！\" とお考えの方もきっと多いのではないでしょうか。\n\nご安心ください、Perlでもサーバレスは(やろうと思えば)できるんです。\n本セッションでは、\"そもそもサーバレスがよくわからないのでどうやって理解したらいいの？\" という方に向けて、Perlならではのアプローチで理解を深めつつ、Perlでできるサーバレスアーキテクチャに関して、いくつかのプラットフォームとその活用方法について話をしたいと思います。\n\nkeyword: Serverless, Cloud, Container, Microsoft Azure, OpenWhisk, etc."},"gsx$talktime":{"$t":"20min"},"gsx$author":{"$t":"Tatsuro Hisamori"},"gsx$githubid":{"$t":"myfinder"},"gsx$twitterid":{"$t":"myfinder"},"gsx$blogurl":{"$t":"myfinder.hatenablog.com"},"gsx$timestamp":{"$t":"2017/02/26"},"gsx$trackid":{"$t":"track-b"},"gsx$startat":{"$t":"14:00"}},{"id":{"$t":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/d9ney"},"updated":{"$t":"2017-03-01T09:38:17.705Z"},"category":[{"scheme":"http://schemas.google.com/spreadsheets/2006","term":"http://schemas.google.com/spreadsheets/2006#list"}],"title":{"type":"text","$t":"28"},"content":{"type":"text","$t":"title: Perl to Go, description: 最近皆さんの周りのPerl MongerもGoを使うようになったと思いませんか⁉︎\nPerlには素晴らしいモジュールが沢山存在します。そこでPerlとGoの得意分野をそれぞれ考えた上で、どのようにPerlモジュールからGoのライブラリとして書き直すのか、コツっぽい話をします。✌️✌️, talktime: 20min, author: codehex, githubid: Code-Hex, twitterid: CodeHex , blogurl: codehex.hateblo.jp, timestamp: 2017/02/08, trackid: track-c, startat: 14:00"},"link":[{"rel":"self","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/d9ney"}],"gsx$id":{"$t":"28"},"gsx$title":{"$t":"Perl to Go"},"gsx$description":{"$t":"最近皆さんの周りのPerl MongerもGoを使うようになったと思いませんか⁉︎\nPerlには素晴らしいモジュールが沢山存在します。そこでPerlとGoの得意分野をそれぞれ考えた上で、どのようにPerlモジュールからGoのライブラリとして書き直すのか、コツっぽい話をします。✌️✌️"},"gsx$talktime":{"$t":"20min"},"gsx$author":{"$t":"codehex"},"gsx$githubid":{"$t":"Code-Hex"},"gsx$twitterid":{"$t":"CodeHex "},"gsx$blogurl":{"$t":"codehex.hateblo.jp"},"gsx$timestamp":{"$t":"2017/02/08"},"gsx$trackid":{"$t":"track-c"},"gsx$startat":{"$t":"14:00"}},{"id":{"$t":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/db1zf"},"updated":{"$t":"2017-03-01T09:38:17.705Z"},"category":[{"scheme":"http://schemas.google.com/spreadsheets/2006","term":"http://schemas.google.com/spreadsheets/2006#list"}],"title":{"type":"text","$t":"29"},"content":{"type":"text","$t":"title: 利用しているBaaSが終了するときにすべきこと または Parse.com の終了と私たちの取り組み, description: 2017年の1月30日、MBaaSの草分け的存在である Parse.com がそのサービスを終了しました。サービス終了の発表があった2016年1月28日からおよそ1年間、我々はユーザを守り、サービスを存続させるための開発に取り組んできました。\nParse.com の話は終わりましたが、今後も多くの BaaS プラットーフォームが登場し、そしていつかは終了していくでしょう。\nこのトークでは、Parse.com を使い込んでいたサービス、ノハナでの Parse.com 脱却エピソードを交えつつ、その日が来た時どのように対応を進めればいいかについて話します。\n\n\nトピックス（予定）\n- 概要\n   - Parse.comとは\n   - Parse.com とノハナ\n- 終了が決まったらまずすること\n   - 脱却チームを立ち上げる\n   - 利用可能なコンポーネントと利用できないコンポーネントを切り分ける\n   - とりあえず動く環境を作る\n- スケジュールを立てる\n   - コンポーネントの検証期間\n   - 新規開発するコンポーネントの設計と実装\n   - システム監視の導入\n   - 負荷テスト\n   - 予想される障害への対処の検討\n   - システム移行期間\n- DBサーバ移行\n   - Parse.com の提供したDB移行ツールについて\n   - 実際に移行時に起きた問題\n- アプリケーションサーバ移行\n   - ネイティブアプリ浸透問題\n   - アプリケーションサーバの移行戦略\n- その他移行に関するトピックス\n   - 推測するな、計測せよ\n   - ストレージダブルライト, talktime: 20min, author: side_tana, githubid: tanatana, twitterid: side_tana, blogurl: http://parochially.hatenablog.com, timestamp: 2017/02/04, trackid: track-b, startat: 14:20"},"link":[{"rel":"self","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/db1zf"}],"gsx$id":{"$t":"29"},"gsx$title":{"$t":"利用しているBaaSが終了するときにすべきこと または Parse.com の終了と私たちの取り組み"},"gsx$description":{"$t":"2017年の1月30日、MBaaSの草分け的存在である Parse.com がそのサービスを終了しました。サービス終了の発表があった2016年1月28日からおよそ1年間、我々はユーザを守り、サービスを存続させるための開発に取り組んできました。\nParse.com の話は終わりましたが、今後も多くの BaaS プラットーフォームが登場し、そしていつかは終了していくでしょう。\nこのトークでは、Parse.com を使い込んでいたサービス、ノハナでの Parse.com 脱却エピソードを交えつつ、その日が来た時どのように対応を進めればいいかについて話します。\n\n\nトピックス（予定）\n- 概要\n   - Parse.comとは\n   - Parse.com とノハナ\n- 終了が決まったらまずすること\n   - 脱却チームを立ち上げる\n   - 利用可能なコンポーネントと利用できないコンポーネントを切り分ける\n   - とりあえず動く環境を作る\n- スケジュールを立てる\n   - コンポーネントの検証期間\n   - 新規開発するコンポーネントの設計と実装\n   - システム監視の導入\n   - 負荷テスト\n   - 予想される障害への対処の検討\n   - システム移行期間\n- DBサーバ移行\n   - Parse.com の提供したDB移行ツールについて\n   - 実際に移行時に起きた問題\n- アプリケーションサーバ移行\n   - ネイティブアプリ浸透問題\n   - アプリケーションサーバの移行戦略\n- その他移行に関するトピックス\n   - 推測するな、計測せよ\n   - ストレージダブルライト"},"gsx$talktime":{"$t":"20min"},"gsx$author":{"$t":"side_tana"},"gsx$githubid":{"$t":"tanatana"},"gsx$twitterid":{"$t":"side_tana"},"gsx$blogurl":{"$t":"http://parochially.hatenablog.com"},"gsx$timestamp":{"$t":"2017/02/04"},"gsx$trackid":{"$t":"track-b"},"gsx$startat":{"$t":"14:20"}},{"id":{"$t":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/dcgjs"},"updated":{"$t":"2017-03-01T09:38:17.705Z"},"category":[{"scheme":"http://schemas.google.com/spreadsheets/2006","term":"http://schemas.google.com/spreadsheets/2006#list"}],"title":{"type":"text","$t":"31"},"content":{"type":"text","$t":"title: なぜからはじめる開発, description: \n# 概要\n\n作ったものが、使われなかったり、社内評価されないなんて経験はありませんか。  \n開発チームで意見が衝突したときに、当たり障りのない折衷案に落ち着いてしまうなんてことはありませんか。  \nあるいは、より良いものを作りたいという気持ちはあるけれど、空回りしてしまうなんてことはありませんか。\n\nこういった課題は、なぜ作るのかを理解することで、解決できることが多いと思います。  \nこの発表では「なぜ」の理解を深めたいと思います。\n\n# アジェンダ\n\n- なぜ作るのかを聞く\n  - 何を聞くと良いか\n  - 聞くときに気をつけること\n- 何を作るかの舞台裏\n  - 成功の前提条件を揃える\n  - ボトルネックの設定\n  - 解決方法と目標の設定\n    - 必要条件を揃える\n  - 元も子もないこと\n    - 絶対の正解はない\n    - 直感も大事\n- Perl から学んだこと\n  - TIMTOWTDI\n  - YAPC\n\n# 課題の回答例\n\n- 作ったものが使われないのは、価値がないか、使いにくいかのどちらか\n- 社内評価されないのは、価値が伝わっていないから\n- 意見が衝突するのは、ペルソナ、ミッション、ビジョン、戦略、戦術のいずれかが違うから\n- 空回りするのは、相手のことを尊重できていないから\n\n# 背景\n\n上に挙げた課題は、私自身が、エンジニアとして感じてきた課題です。  \nこれらの課題は、ケースバイケースと考えることもできるのですが、  \nプロダクトマネージャーになり、どう作るかだけでなく、何を作るか決めていかなければならない立場となり、  \nできる限り再現性のある判断をし、チームがより成功できるように考える必要が出てきました。  \n\n今回の発表内容が、思考技術を整理するきっかけになれば幸いです。\n, talktime: 20min, author: 小林謙太, githubid: kfly8, twitterid: kfly8, timestamp: 2017/02/04, trackid: track-c, startat: 14:20"},"link":[{"rel":"self","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/dcgjs"}],"gsx$id":{"$t":"31"},"gsx$title":{"$t":"なぜからはじめる開発"},"gsx$description":{"$t":"\n# 概要\n\n作ったものが、使われなかったり、社内評価されないなんて経験はありませんか。  \n開発チームで意見が衝突したときに、当たり障りのない折衷案に落ち着いてしまうなんてことはありませんか。  \nあるいは、より良いものを作りたいという気持ちはあるけれど、空回りしてしまうなんてことはありませんか。\n\nこういった課題は、なぜ作るのかを理解することで、解決できることが多いと思います。  \nこの発表では「なぜ」の理解を深めたいと思います。\n\n# アジェンダ\n\n- なぜ作るのかを聞く\n  - 何を聞くと良いか\n  - 聞くときに気をつけること\n- 何を作るかの舞台裏\n  - 成功の前提条件を揃える\n  - ボトルネックの設定\n  - 解決方法と目標の設定\n    - 必要条件を揃える\n  - 元も子もないこと\n    - 絶対の正解はない\n    - 直感も大事\n- Perl から学んだこと\n  - TIMTOWTDI\n  - YAPC\n\n# 課題の回答例\n\n- 作ったものが使われないのは、価値がないか、使いにくいかのどちらか\n- 社内評価されないのは、価値が伝わっていないから\n- 意見が衝突するのは、ペルソナ、ミッション、ビジョン、戦略、戦術のいずれかが違うから\n- 空回りするのは、相手のことを尊重できていないから\n\n# 背景\n\n上に挙げた課題は、私自身が、エンジニアとして感じてきた課題です。  \nこれらの課題は、ケースバイケースと考えることもできるのですが、  \nプロダクトマネージャーになり、どう作るかだけでなく、何を作るか決めていかなければならない立場となり、  \nできる限り再現性のある判断をし、チームがより成功できるように考える必要が出てきました。  \n\n今回の発表内容が、思考技術を整理するきっかけになれば幸いです。\n"},"gsx$talktime":{"$t":"20min"},"gsx$author":{"$t":"小林謙太"},"gsx$githubid":{"$t":"kfly8"},"gsx$twitterid":{"$t":"kfly8"},"gsx$blogurl":{"$t":""},"gsx$timestamp":{"$t":"2017/02/04"},"gsx$trackid":{"$t":"track-c"},"gsx$startat":{"$t":"14:20"}},{"id":{"$t":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/ddv49"},"updated":{"$t":"2017-03-01T09:38:17.705Z"},"category":[{"scheme":"http://schemas.google.com/spreadsheets/2006","term":"http://schemas.google.com/spreadsheets/2006#list"}],"title":{"type":"text","$t":"33"},"content":{"type":"text","$t":"title: PerlのWebアプリケーションをデプロイする時に僕達が考えたこと, description: Webアプリケーションを作ったとき, それを実際にユーザーに届けるためには, そのWebアプリケーションを\"デプロイ\"して, ユーザーが利用可能な状態に設置しなければなりません.\n最初は, 開発者自らがコマンドを入力する, 手動のデプロイで十分かもしれません. しかし, その作業を何度も繰り返す場合, アプリケーションの構成上少し手順が複雑な場合, あるいはデプロイを行うサーバーの台数が増えてくると, 手動でコマンドを入力するデプロイだと少し厳しくなってきます.\n\n本トークでは, 主に趣味で開発するような小規模なPerl製Webアプリケーションのデプロイ戦略や, そのために有用な道具類の紹介をします.\n具体的には, 以下のような内容が含まれる予定です.\n\n- デプロイとは?\n- 手動デプロイと自動デプロイ\n- デプロイの自動化ツールについて\n- Push型とPull型\n- Graceful Restart\n- バッチやワーカーのデプロイ\n- デプロイ対象をどのように管理するか?\n\n｢PerlでWebアプリケーションを作ってみたけど, どういう感じにデプロイすればいいんだろう?｣とお悩みの方には, きっと興味深くお聴きいただけるのではないかと思います., talktime: 20min, author: papix, githubid: papix, twitterid: __papix__, blogurl: http://papix.hatenablog.com/, timestamp: 2017/02/03, trackid: track-b, startat: 14:50"},"link":[{"rel":"self","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/ddv49"}],"gsx$id":{"$t":"33"},"gsx$title":{"$t":"PerlのWebアプリケーションをデプロイする時に僕達が考えたこと"},"gsx$description":{"$t":"Webアプリケーションを作ったとき, それを実際にユーザーに届けるためには, そのWebアプリケーションを\"デプロイ\"して, ユーザーが利用可能な状態に設置しなければなりません.\n最初は, 開発者自らがコマンドを入力する, 手動のデプロイで十分かもしれません. しかし, その作業を何度も繰り返す場合, アプリケーションの構成上少し手順が複雑な場合, あるいはデプロイを行うサーバーの台数が増えてくると, 手動でコマンドを入力するデプロイだと少し厳しくなってきます.\n\n本トークでは, 主に趣味で開発するような小規模なPerl製Webアプリケーションのデプロイ戦略や, そのために有用な道具類の紹介をします.\n具体的には, 以下のような内容が含まれる予定です.\n\n- デプロイとは?\n- 手動デプロイと自動デプロイ\n- デプロイの自動化ツールについて\n- Push型とPull型\n- Graceful Restart\n- バッチやワーカーのデプロイ\n- デプロイ対象をどのように管理するか?\n\n｢PerlでWebアプリケーションを作ってみたけど, どういう感じにデプロイすればいいんだろう?｣とお悩みの方には, きっと興味深くお聴きいただけるのではないかと思います."},"gsx$talktime":{"$t":"20min"},"gsx$author":{"$t":"papix"},"gsx$githubid":{"$t":"papix"},"gsx$twitterid":{"$t":"__papix__"},"gsx$blogurl":{"$t":"http://papix.hatenablog.com/"},"gsx$timestamp":{"$t":"2017/02/03"},"gsx$trackid":{"$t":"track-b"},"gsx$startat":{"$t":"14:50"}},{"id":{"$t":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/d415a"},"updated":{"$t":"2017-03-01T09:38:17.705Z"},"category":[{"scheme":"http://schemas.google.com/spreadsheets/2006","term":"http://schemas.google.com/spreadsheets/2006#list"}],"title":{"type":"text","$t":"34"},"content":{"type":"text","$t":"title: OAuth 2.0 Token Binding の概要と期待, description: 標準化の段階にある OAuth 2.0 Token Binding (https://datatracker.ietf.org/doc/draft-ietf-oauth-token-binding/) の概要と、期待されるユースケースをお話します。Web における認可フレームワークとしてデファクトとなった感すらある OAuth 2.0 ですが、多様なシチュエーションで用いられる中での課題も存在します。ここでは、現状の Bearer Token を前提とした枠組みでの課題や模索されてきた解決策に触れながら、Token Binding が実現されると何が嬉しいのかに焦点をあてて紹介します。, talktime: 20min, author: 田中達也, timestamp: 2017/02/04, trackid: track-c, startat: 14:50"},"link":[{"rel":"self","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/d415a"}],"gsx$id":{"$t":"34"},"gsx$title":{"$t":"OAuth 2.0 Token Binding の概要と期待"},"gsx$description":{"$t":"標準化の段階にある OAuth 2.0 Token Binding (https://datatracker.ietf.org/doc/draft-ietf-oauth-token-binding/) の概要と、期待されるユースケースをお話します。Web における認可フレームワークとしてデファクトとなった感すらある OAuth 2.0 ですが、多様なシチュエーションで用いられる中での課題も存在します。ここでは、現状の Bearer Token を前提とした枠組みでの課題や模索されてきた解決策に触れながら、Token Binding が実現されると何が嬉しいのかに焦点をあてて紹介します。"},"gsx$talktime":{"$t":"20min"},"gsx$author":{"$t":"田中達也"},"gsx$githubid":{"$t":""},"gsx$twitterid":{"$t":""},"gsx$blogurl":{"$t":""},"gsx$timestamp":{"$t":"2017/02/04"},"gsx$trackid":{"$t":"track-c"},"gsx$startat":{"$t":"14:50"}},{"id":{"$t":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/d5fpr"},"updated":{"$t":"2017-03-01T09:38:17.705Z"},"category":[{"scheme":"http://schemas.google.com/spreadsheets/2006","term":"http://schemas.google.com/spreadsheets/2006#list"}],"title":{"type":"text","$t":"35"},"content":{"type":"text","$t":"title: カヤックのゲーム開発・運用の「今」 力技と効率化の先に我々が目にしたものとは, description: みなさまサービス運用やっていっていますか。\nサービス運用と一言に言ってもいろんな形態がありますが、我々、面白法人カヤックのソーシャルゲーム事業部では、現在運用中のサービスはPerl5で開発され、運用しています。そしてサーバアプリケーションのコードを書く人間と運用をする人間は同じという体制を取っています。\n\n私は2014年9月にリリースされた「ぼくらの甲子園！ポケット」というタイトルに新規開発中から現在まで関わっていますが、途中何度か一部をスクラップ・アンド・ビルドしたり、新機能がボコンといきなりくっついたり、ゲームシステムの根幹のアグレッシブな修正を走り続けながらリリースするなどのチャレンジをしています。\n\nこのトークでは以下のような運用しながらチャレンジし続けたことについて喋ろうと思います。\n\n* うるう秒ってやつとDateTime.pmの厄介な関係とそれに対するBKな解\n* N + 1とDBIx::Classと鈴と。しゅっしゅー問題\n* あとからマルチテナントにする、その際の妥協\n* イベントを5本並行開発して最後にうまいことマージする方法について、あるいはスプレッドシートをマージする方法について\n* 雨後の筍のように開発サーバが上がってきてdockerのホストが死ぬ件\n* 熟成されてきたデプロイの作法、そのうち伝統芸能になるやつ\n\n以上キラキラというより泥臭いけど含蓄のある感じの話をメインに据えて話します。, talktime: 40min, author: macopy, githubid: mackee, twitterid: mackee_w, blogurl: http://mackee.hatenablog.com/, timestamp: 2017/02/01, trackid: track-b, startat: 15:10"},"link":[{"rel":"self","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/d5fpr"}],"gsx$id":{"$t":"35"},"gsx$title":{"$t":"カヤックのゲーム開発・運用の「今」 力技と効率化の先に我々が目にしたものとは"},"gsx$description":{"$t":"みなさまサービス運用やっていっていますか。\nサービス運用と一言に言ってもいろんな形態がありますが、我々、面白法人カヤックのソーシャルゲーム事業部では、現在運用中のサービスはPerl5で開発され、運用しています。そしてサーバアプリケーションのコードを書く人間と運用をする人間は同じという体制を取っています。\n\n私は2014年9月にリリースされた「ぼくらの甲子園！ポケット」というタイトルに新規開発中から現在まで関わっていますが、途中何度か一部をスクラップ・アンド・ビルドしたり、新機能がボコンといきなりくっついたり、ゲームシステムの根幹のアグレッシブな修正を走り続けながらリリースするなどのチャレンジをしています。\n\nこのトークでは以下のような運用しながらチャレンジし続けたことについて喋ろうと思います。\n\n* うるう秒ってやつとDateTime.pmの厄介な関係とそれに対するBKな解\n* N + 1とDBIx::Classと鈴と。しゅっしゅー問題\n* あとからマルチテナントにする、その際の妥協\n* イベントを5本並行開発して最後にうまいことマージする方法について、あるいはスプレッドシートをマージする方法について\n* 雨後の筍のように開発サーバが上がってきてdockerのホストが死ぬ件\n* 熟成されてきたデプロイの作法、そのうち伝統芸能になるやつ\n\n以上キラキラというより泥臭いけど含蓄のある感じの話をメインに据えて話します。"},"gsx$talktime":{"$t":"40min"},"gsx$author":{"$t":"macopy"},"gsx$githubid":{"$t":"mackee"},"gsx$twitterid":{"$t":"mackee_w"},"gsx$blogurl":{"$t":"http://mackee.hatenablog.com/"},"gsx$timestamp":{"$t":"2017/02/01"},"gsx$trackid":{"$t":"track-b"},"gsx$startat":{"$t":"15:10"}},{"id":{"$t":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/d6ua4"},"updated":{"$t":"2017-03-01T09:38:17.705Z"},"category":[{"scheme":"http://schemas.google.com/spreadsheets/2006","term":"http://schemas.google.com/spreadsheets/2006#list"}],"title":{"type":"text","$t":"36"},"content":{"type":"text","$t":"title: 今だからこそ振り返ろう！OWASP Top 10, description: Open Web Application Security  Project（通称OWASP）が、3年に1度公開する（はず？）OWASP Top 10ですが、出る予定だった2016年版は残念ながら2016年中に間に合いませんでした。とはいえ、前回のOWASP Top 10 2013の公開からすでに3年以上経過していますので、OWASP Top 10 2013を振り返り、基本的なWebアプリケーションセキュリティの話をおさらいしたいと思います。, talktime: 40min, author: mahoyaya, githubid: mahoyaya, twitterid: mahoyaya, timestamp: 2017/02/04, trackid: track-c, startat: 15:10"},"link":[{"rel":"self","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/d6ua4"}],"gsx$id":{"$t":"36"},"gsx$title":{"$t":"今だからこそ振り返ろう！OWASP Top 10"},"gsx$description":{"$t":"Open Web Application Security  Project（通称OWASP）が、3年に1度公開する（はず？）OWASP Top 10ですが、出る予定だった2016年版は残念ながら2016年中に間に合いませんでした。とはいえ、前回のOWASP Top 10 2013の公開からすでに3年以上経過していますので、OWASP Top 10 2013を振り返り、基本的なWebアプリケーションセキュリティの話をおさらいしたいと思います。"},"gsx$talktime":{"$t":"40min"},"gsx$author":{"$t":"mahoyaya"},"gsx$githubid":{"$t":"mahoyaya"},"gsx$twitterid":{"$t":"mahoyaya"},"gsx$blogurl":{"$t":""},"gsx$timestamp":{"$t":"2017/02/04"},"gsx$trackid":{"$t":"track-c"},"gsx$startat":{"$t":"15:10"}},{"id":{"$t":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/d88ul"},"updated":{"$t":"2017-03-01T09:38:17.705Z"},"category":[{"scheme":"http://schemas.google.com/spreadsheets/2006","term":"http://schemas.google.com/spreadsheets/2006#list"}],"title":{"type":"text","$t":"38"},"content":{"type":"text","$t":"title: Perl 6 で Web Application Framework をつくる, description: Web アプリケーションの開発をやっていると、誰もが一度は自分で Web Application Framework を作ってみたくなる物ではないでしょうか。実際の本番で導入するかは別にして、その言語におけるWebアプリケーション開発の仕組みを理解するためには重要な試みだと思っています。今回は、 Perl 6 でシンプルな Web Application Framework を作る話から、 Perl 6 での Web アプリケーション開発についてお話ししようと思います。, talktime: 20min, author: astj, githubid: astj, twitterid: ast_j, blogurl: http://astj.hatenablog.com/, timestamp: 2017/01/31, trackid: track-c, startat: 16:00"},"link":[{"rel":"self","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/d88ul"}],"gsx$id":{"$t":"38"},"gsx$title":{"$t":"Perl 6 で Web Application Framework をつくる"},"gsx$description":{"$t":"Web アプリケーションの開発をやっていると、誰もが一度は自分で Web Application Framework を作ってみたくなる物ではないでしょうか。実際の本番で導入するかは別にして、その言語におけるWebアプリケーション開発の仕組みを理解するためには重要な試みだと思っています。今回は、 Perl 6 でシンプルな Web Application Framework を作る話から、 Perl 6 での Web アプリケーション開発についてお話ししようと思います。"},"gsx$talktime":{"$t":"20min"},"gsx$author":{"$t":"astj"},"gsx$githubid":{"$t":"astj"},"gsx$twitterid":{"$t":"ast_j"},"gsx$blogurl":{"$t":"http://astj.hatenablog.com/"},"gsx$timestamp":{"$t":"2017/01/31"},"gsx$trackid":{"$t":"track-c"},"gsx$startat":{"$t":"16:00"}},{"id":{"$t":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/dkvya"},"updated":{"$t":"2017-03-01T09:38:17.705Z"},"category":[{"scheme":"http://schemas.google.com/spreadsheets/2006","term":"http://schemas.google.com/spreadsheets/2006#list"}],"title":{"type":"text","$t":"39"},"content":{"type":"text","$t":"title: TRUNCATE user;に如何にして立ち向かうか, description: Gitlabがデータベースを喪失してことが話題になっていますが、普段データベースサーバをメンテナンスしている立場としてはなかなか胃が痛くなる話です。\n\nちゃんとバックアップをとろうね、と言うのは簡単ですが、\"役に立つ\"バックアップをきちんと取り続けるのは案外大変なこともあります。\n\nまさに成長途中のサービスのバックアップについて、ぶつかった問題や対応について話してみたいと思います。, talktime: 20min, author: meru_akimbo, githubid: meru-akimbo, twitterid: meru_akimbo, blogurl: http://blog.hatena.ne.jp/meru_akimbo/meru-akimbo.hatenablog.com/, timestamp: 2017/02/02, trackid: track-b, startat: 16:00"},"link":[{"rel":"self","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/dkvya"}],"gsx$id":{"$t":"39"},"gsx$title":{"$t":"TRUNCATE user;に如何にして立ち向かうか"},"gsx$description":{"$t":"Gitlabがデータベースを喪失してことが話題になっていますが、普段データベースサーバをメンテナンスしている立場としてはなかなか胃が痛くなる話です。\n\nちゃんとバックアップをとろうね、と言うのは簡単ですが、\"役に立つ\"バックアップをきちんと取り続けるのは案外大変なこともあります。\n\nまさに成長途中のサービスのバックアップについて、ぶつかった問題や対応について話してみたいと思います。"},"gsx$talktime":{"$t":"20min"},"gsx$author":{"$t":"meru_akimbo"},"gsx$githubid":{"$t":"meru-akimbo"},"gsx$twitterid":{"$t":"meru_akimbo"},"gsx$blogurl":{"$t":"http://blog.hatena.ne.jp/meru_akimbo/meru-akimbo.hatenablog.com/"},"gsx$timestamp":{"$t":"2017/02/02"},"gsx$trackid":{"$t":"track-b"},"gsx$startat":{"$t":"16:00"}},{"id":{"$t":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/dmair"},"updated":{"$t":"2017-03-01T09:38:17.705Z"},"category":[{"scheme":"http://schemas.google.com/spreadsheets/2006","term":"http://schemas.google.com/spreadsheets/2006#list"}],"title":{"type":"text","$t":"42"},"content":{"type":"text","$t":"title: Perl ウェブ開発の中世 〜CGI と Plack の間〜, description: 「CGI といえば Perl」。20世紀末から21世紀初頭にかけての数年間、Perl は CGI の代名詞として扱われてきました。\n\nしかしインターネットが人口に膾炙していく中で、ウェブアプリケーションもパフォーマンスを求められるようになります。それは指数関数的と思われるほどのマシンパワーの増大速度を上回るものでした。その流れの中で、大手IT企業はもとより中小企業も CGI を脱して他の選択肢をいくことになります。その選択肢の中には Perl 以外のプログラミング言語の選択も（残念ながら）ありました。\n\nしかしながら Perl を志向する人々によって、SpeedyCGI、FastCGI、mod_perl といった技術を元に Perl のウェブアプリケーションを高速化しようという試みが行われます。さながらこれらの技術がせめぎ合っていた時代は「CGI の古代」と「Plack の近現代」の間にある「Perl ウェブ開発の中世」のようにも感じます。\n\nいまでは「Perl でウェブアプリケーションといえば Plack」という時代になり、当然のように Plack が選択されるようになりましたが、発表された2009年前後、そして Plack が普及段階に乗って大企業以外の場所でも目に触れるようになるまでには、先人達による様々な苦労が繰り広げられることになります。\n\nこのトークでは、CGI の振り返り、CGI の難点とその克服、そして Perl ウェブ開発の中世時代を振り返ります。また、近現代側の Plack からも Plack::Handler の選び方や、古代や中世から Plack へ寄せるためのよくあるテクニックも余った時間に応じて解説する予定です。, talktime: 20min, author: OGATA Tetsuji, githubid: xtetsuji, twitterid: xtetsuji, blogurl: http://post.tetsuji.jp/, timestamp: 2017/02/04, trackid: track-a, startat: 16:00"},"link":[{"rel":"self","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/dmair"}],"gsx$id":{"$t":"42"},"gsx$title":{"$t":"Perl ウェブ開発の中世 〜CGI と Plack の間〜"},"gsx$description":{"$t":"「CGI といえば Perl」。20世紀末から21世紀初頭にかけての数年間、Perl は CGI の代名詞として扱われてきました。\n\nしかしインターネットが人口に膾炙していく中で、ウェブアプリケーションもパフォーマンスを求められるようになります。それは指数関数的と思われるほどのマシンパワーの増大速度を上回るものでした。その流れの中で、大手IT企業はもとより中小企業も CGI を脱して他の選択肢をいくことになります。その選択肢の中には Perl 以外のプログラミング言語の選択も（残念ながら）ありました。\n\nしかしながら Perl を志向する人々によって、SpeedyCGI、FastCGI、mod_perl といった技術を元に Perl のウェブアプリケーションを高速化しようという試みが行われます。さながらこれらの技術がせめぎ合っていた時代は「CGI の古代」と「Plack の近現代」の間にある「Perl ウェブ開発の中世」のようにも感じます。\n\nいまでは「Perl でウェブアプリケーションといえば Plack」という時代になり、当然のように Plack が選択されるようになりましたが、発表された2009年前後、そして Plack が普及段階に乗って大企業以外の場所でも目に触れるようになるまでには、先人達による様々な苦労が繰り広げられることになります。\n\nこのトークでは、CGI の振り返り、CGI の難点とその克服、そして Perl ウェブ開発の中世時代を振り返ります。また、近現代側の Plack からも Plack::Handler の選び方や、古代や中世から Plack へ寄せるためのよくあるテクニックも余った時間に応じて解説する予定です。"},"gsx$talktime":{"$t":"20min"},"gsx$author":{"$t":"OGATA Tetsuji"},"gsx$githubid":{"$t":"xtetsuji"},"gsx$twitterid":{"$t":"xtetsuji"},"gsx$blogurl":{"$t":"http://post.tetsuji.jp/"},"gsx$timestamp":{"$t":"2017/02/04"},"gsx$trackid":{"$t":"track-a"},"gsx$startat":{"$t":"16:00"}},{"id":{"$t":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/dnp34"},"updated":{"$t":"2017-03-01T09:38:17.705Z"},"category":[{"scheme":"http://schemas.google.com/spreadsheets/2006","term":"http://schemas.google.com/spreadsheets/2006#list"}],"title":{"type":"text","$t":"43"},"content":{"type":"text","$t":"title: Webエンジニアに知ってほしいRDBアンチパターン, description: 最初は良かれと思ってした設計が後々大きなボトルネックになることが度々あると思います。\nそんなWebエンジニアが陥りやすい罠（アンチパターン）をご紹介し、未来の苦労を一つでも減らせる、そんなセッションをお送りします。\n今回は\n\n- 忘れ去られたバックアップ\n- 使われない制約\n- ロックの功罪\n\nに触れたいと思います。\nどれも胸に刺さる内容ですのでご期待ください！！, talktime: 40min, author: 曽根　壮大, githubid: soudai, twitterid: soudai1025, blogurl: http://soudai.hatenablog.com/, timestamp: 2017/01/16, trackid: track-b, startat: 16:20"},"link":[{"rel":"self","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/dnp34"}],"gsx$id":{"$t":"43"},"gsx$title":{"$t":"Webエンジニアに知ってほしいRDBアンチパターン"},"gsx$description":{"$t":"最初は良かれと思ってした設計が後々大きなボトルネックになることが度々あると思います。\nそんなWebエンジニアが陥りやすい罠（アンチパターン）をご紹介し、未来の苦労を一つでも減らせる、そんなセッションをお送りします。\n今回は\n\n- 忘れ去られたバックアップ\n- 使われない制約\n- ロックの功罪\n\nに触れたいと思います。\nどれも胸に刺さる内容ですのでご期待ください！！"},"gsx$talktime":{"$t":"40min"},"gsx$author":{"$t":"曽根　壮大"},"gsx$githubid":{"$t":"soudai"},"gsx$twitterid":{"$t":"soudai1025"},"gsx$blogurl":{"$t":"http://soudai.hatenablog.com/"},"gsx$timestamp":{"$t":"2017/01/16"},"gsx$trackid":{"$t":"track-b"},"gsx$startat":{"$t":"16:20"}},{"id":{"$t":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/dp3nl"},"updated":{"$t":"2017-03-01T09:38:17.705Z"},"category":[{"scheme":"http://schemas.google.com/spreadsheets/2006","term":"http://schemas.google.com/spreadsheets/2006#list"}],"title":{"type":"text","$t":"44"},"content":{"type":"text","$t":"title: はてなシステムの考古学, description: ㈱はてなは今年で設立から16年目を迎えます。人力検索はてなに始まり、はてなブックマーク、はてなブログといったコンシューマ向けサービスから、サーバ管理・監視をおこなうMackerelや他社との協業サービスなど数多くのサービスを手広く展開しています。一部のサービスは昔のまま10年以上も愛されて今も元気に動いている一方、新しいサービスを開発するときには新たな設計を選ぶこともしています。\nこのトークでは、はてなにおけるウェブサービス開発の軌跡をPerlエンジニアの観点から辿り、生き残ったもの・捨てられたものからポスト現代のサービス開発を探ります。, talktime: 40min, author: motemen, githubid: motemen, twitterid: motemen, blogurl: http://motemen.hatenablog.com/, timestamp: 2017/02/03, trackid: track-a, startat: 16:20"},"link":[{"rel":"self","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/dp3nl"}],"gsx$id":{"$t":"44"},"gsx$title":{"$t":"はてなシステムの考古学"},"gsx$description":{"$t":"㈱はてなは今年で設立から16年目を迎えます。人力検索はてなに始まり、はてなブックマーク、はてなブログといったコンシューマ向けサービスから、サーバ管理・監視をおこなうMackerelや他社との協業サービスなど数多くのサービスを手広く展開しています。一部のサービスは昔のまま10年以上も愛されて今も元気に動いている一方、新しいサービスを開発するときには新たな設計を選ぶこともしています。\nこのトークでは、はてなにおけるウェブサービス開発の軌跡をPerlエンジニアの観点から辿り、生き残ったもの・捨てられたものからポスト現代のサービス開発を探ります。"},"gsx$talktime":{"$t":"40min"},"gsx$author":{"$t":"motemen"},"gsx$githubid":{"$t":"motemen"},"gsx$twitterid":{"$t":"motemen"},"gsx$blogurl":{"$t":"http://motemen.hatenablog.com/"},"gsx$timestamp":{"$t":"2017/02/03"},"gsx$trackid":{"$t":"track-a"},"gsx$startat":{"$t":"16:20"}},{"id":{"$t":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/df9om"},"updated":{"$t":"2017-03-01T09:38:17.705Z"},"category":[{"scheme":"http://schemas.google.com/spreadsheets/2006","term":"http://schemas.google.com/spreadsheets/2006#list"}],"title":{"type":"text","$t":"46"},"content":{"type":"text","$t":"title: H2O x mrubyで人はどれくらい幸せになれるのか, description: H2Oといえば、特にHTTP/2に対して最適化された高速なWebサーバーとして有名ですが、一方でH2Oは公式の組み込み言語としてmrubyを採用しており、これを用いることで高速なだけではなく、非常に柔軟かつ拡張性の高い設定・運用が可能となっています。\n本トークでは、H2Oの開発に半年前くらいからfull-time commiterとして参加しているスピーカーが、知られざる（？）H2Oの便利機能を、内部実装のチラ見せ解説を伴いつつ紹介してゆきます。\nトーク終盤では、H2O x Perlの可能性も万が一で探る予定です（予定は未定）\n\nトーク内容（予定）\n* H2O x mruby概要\n* 知られざる機能\n    * Access Control\n    * Redirect\n    * DoS Detection\n    * HTTP Request\n    * Redis\n    * Other TCP Bindings (Database, memcached, etc)\n    * Image Filter\n* Benchmark\n* Perlネタでなにかひとつガッとくるやつ, talktime: 40min, author: @i110, githubid: i110, twitterid: i110, timestamp: 2017/02/04, trackid: track-c, startat: 16:20"},"link":[{"rel":"self","type":"application/atom+xml","href":"https://spreadsheets.google.com/feeds/list/1e16uUbDJGclGdrJzVl-EFr8ns2J3S2WNaAEA151NsQk/on6oryq/public/values/df9om"}],"gsx$id":{"$t":"46"},"gsx$title":{"$t":"H2O x mrubyで人はどれくらい幸せになれるのか"},"gsx$description":{"$t":"H2Oといえば、特にHTTP/2に対して最適化された高速なWebサーバーとして有名ですが、一方でH2Oは公式の組み込み言語としてmrubyを採用しており、これを用いることで高速なだけではなく、非常に柔軟かつ拡張性の高い設定・運用が可能となっています。\n本トークでは、H2Oの開発に半年前くらいからfull-time commiterとして参加しているスピーカーが、知られざる（？）H2Oの便利機能を、内部実装のチラ見せ解説を伴いつつ紹介してゆきます。\nトーク終盤では、H2O x Perlの可能性も万が一で探る予定です（予定は未定）\n\nトーク内容（予定）\n* H2O x mruby概要\n* 知られざる機能\n    * Access Control\n    * Redirect\n    * DoS Detection\n    * HTTP Request\n    * Redis\n    * Other TCP Bindings (Database, memcached, etc)\n    * Image Filter\n* Benchmark\n* Perlネタでなにかひとつガッとくるやつ"},"gsx$talktime":{"$t":"40min"},"gsx$author":{"$t":"@i110"},"gsx$githubid":{"$t":"i110"},"gsx$twitterid":{"$t":"i110"},"gsx$blogurl":{"$t":""},"gsx$timestamp":{"$t":"2017/02/04"},"gsx$trackid":{"$t":"track-c"},"gsx$startat":{"$t":"16:20"}}]}}